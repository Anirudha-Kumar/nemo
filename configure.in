dnl Process this file with autoconf to produce a new configure script
dnl if it has changed. See also the Makefile in $NEMO  how to automate
dnl this.
dnl ---------------------------------------------------------------------------------

AC_MSG_CHECKING([NEMO config])

AC_INIT(NEMORC)
AC_CONFIG_HEADER(config.h)

dnl -- checks for programs
dnl -- checks for libraries
dnl -- checks for header files
dnl -- checks for typedefs
dnl -- checks for structures
dnl -- checks for compiler characteristics
dnl -- checks for library functions
dnl -- checks for system services


dnl ---			NEMO base directory
NEMO="`pwd`"
NEMO_LIBS=""
NEMO_CFLAGS=""
NEMO_FFLAGS=""
AC_SUBST(NEMO)
AC_SUBST(NEMO_LIBS)
AC_SUBST(NEMO_CFLAGS)
AC_SUBST(NEMO_FFLAGS)



dnl ---			Nemo version - just for fun for now
NEMOVER="`cat VERSION`"
AC_SUBST(NEMOVER)

dnl ---                 sizeof various data types
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)


AC_HEADER_STDC
AC_CHECK_FUNCS(strchr memcpy)

dnl AC_PROG_CPP

# Use native cc if present
AC_MSG_CHECKING([for vendor's cc to be used instead of gcc])
AC_CHECK_PROG(CC, cc, cc)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

AC_ARG_PROGRAM

AC_ARG_ENABLE(debug, [  --enable-debug          compile for debugging], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
        CFLAGS="-g"
        FFLAGS="-g"
        LDFLAGS="-g"
        # should we define DEBUG too?
fi

AC_MSG_CHECKING(which precision NEMO is going to use)
prec_flag=""
AC_ARG_ENABLE(single, [  --enable-single          single-precision], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	prec_flag="-DSINGLEPREC"
fi
AC_ARG_ENABLE(float, [  --enable-float            single-precision], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	prec_flag="-DSINGLEPREC"
fi
AC_ARG_ENABLE(double, [  --enable-double          double-precision], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	prec_flag="-DDOUBLEPREC"
fi
AC_ARG_ENABLE(mixed, [  --enable-mixed           mixed-precision], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	prec_flag="-DMIXEDPREC"
fi
AC_MSG_RESULT($prec_flag)


dnl check FFTW configure
AC_ARG_ENABLE(fortran, [  --disable-fortran   don't use any Fortran], enable_fortran=$enableval, enable_fortran=yes)

AC_ARG_WITH(mesa, [  --with-mesa        force the use of Mesa instead of other graphics libs], with_mesa=$withval, with_mesa=maybe)
AC_ARG_WITH(hdf, [  --with-hdf          force the use of HDF], with_hdf=$withval, with_hdf=maybe)
AC_ARG_WITH(ccmalloc, [  --with-ccmalloc    use CCMALLOC for malloc], with_malloc=$withval, with_ccmalloc=no)

dnl ---------------------------------------------------------------------
dnl             Check for basic X windows stuff
AC_PATH_X
AC_PATH_XTRA
XINCS="$X_CFLAGS"
XLIBS="$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS"
AC_SUBST(XLIBS)
AC_SUBST(XINCS)

dnl ---------------------------------------------------------------------
dnl 3D Graphics Libraries (see also vis5d's configure.in)

GLLIBS=""

# First, look for OpenGL or Mesa:
if test "$with_mesa" != "yes"; then
        AC_CHECK_LIB(GL, glBegin,
            AC_CHECK_LIB(GLU, gluProject, GLLIBS="-lGLU -lGL",
                         :, -lGL $XLIBS), :, $XLIBS)
fi
if test -z "$GLLIBS" -a "$with_mesa" != "no"; then
        AC_CHECK_LIB(MesaGL, glBegin,
            AC_CHECK_LIB(MesaGLU, gluProject, GLLIBS="-lMesaGLU -lMesaGL",
                         :, -lMesaGL $XLIBS), :, $XLIBS)
fi
if test "$with_mesa" = "yes"; then
        AC_CHECK_LIB(GL, glBegin,
            AC_CHECK_LIB(GLU, gluProject, GLLIBS="-lGLU -lGL",
                         :, -lGL $XLIBS), :, $XLIBS)
fi
if test -n "$GLLIBS"; then
        AC_DEFINE(HAVE_OPENGL)
else
        echo "couldn't find OpenGL libraries!"
        if test "$with_mesa" = "yes"; then
                AC_MSG_ERROR([couldn't find Mesa library])
        fi
fi

# Next, look for SGI IrisGL:
if test -z "$GLLIBS"; then
        AC_CHECK_LIB(gl_s, bgnqstrip, ok=yes,ok=no, $XLIBS)
        if test "$ok" = "yes"; then
                AC_CHECK_LIB(fm, fminit, GLLIBS="-lfm -lgl_s",:,-lgl_s $XLIBS)
                if test -z "$GLLIBS"; then
                        AC_CHECK_LIB(fm_s, fminit, 
                                GLLIBS="-lfm_s -lgl_s",:,-lgl_s $XLIBS)
                fi
        fi
        if test -n "$GLLIBS"; then
                AC_DEFINE(HAVE_SGI_GL)
                OPT_UTILS="$OPT_UTILS listfonts"
        fi
fi
# Finally, look for PEX (crufty old 3d extensions for X):
# (do these even work in Vis5d anymore?)
if test -z "$GLLIBS"; then
        # first, check for possible include & lib directory locations:
        if test -d /usr/lib/PEX5/utilities; then
                CPPFLAGS="$CPPFLAGS -I/usr/lib/PEX5/utilities"
        elif test -d /opt/graphics/PEX5/include/X11R6; then
                CPPFLAGS="$CPPFLAGS -I/opt/graphics/PEX5/include/X11R6"
        fi
        if test -d /opt/graphics/PEX5/lib; then
                LDFLAGS="$LDFLAGS -L/opt/graphics/PEX5/lib"
        fi

        # now, check for the actual library:
        save_LDFLAGS="$LDFLAGS"; LDFLAGS="$LDFLAGS $X_LIBS"
        AC_CHECK_LIB(PEX5, PEXInitialize, GLLIBS="$X_LIBS -lPEX5", :, $XLIBS)
        LDFLAGS="$save_LDFLAGS"

        if test -n "$GLLIBS"; then
                # finally, look for the pexut.a library
                AC_MSG_CHECKING([for pexut.a library])
                if test -z "$PEXUT_LIB"; then
                        if test -r /usr/lib/PEX5/utilities/pexut.a; then
                                PEXUT_LIB="/usr/lib/PEX5/utilities/pexut.a"
                        elif test -r /var/opt/PEX5/pexut.a; then
                                PEXUT_LIB="/var/opt/PEX5/pexut.a"
                        fi
                fi
                AC_MSG_RESULT(${PEXUT_LIB-no})
                if test -z "$PEXUT_LIB"; then
                        AC_MSG_WARN([pexut.a is required when using PEX])
                        GLLIBS=""
                elif test -r "$PEXUT_LIB"; then
                        GLLIBS="$PEXUT_LIB $GLLIBS"
                else
                        # this could happen if the user specified a bogus
                        # PEXUT_LIB environment variable:
                        AC_MSG_ERROR($PEXUT_LIB is not readable)
                fi
        fi

        if test -n "$GLLIBS"; then
                AC_DEFINE(HAVE_PEX)
        fi
fi

if test -z "$GLLIBS"; then
        echo "****************************************************"
        echo "You need to install a 3D graphics library, preferably"
        echo "the free OpenGL replacement, Mesa.  You can download"
        echo "Mesa from the Mesa home page:"
        echo "              http://www.mesa3d.org/"
        echo "and install it by running:"
        echo "       ./configure && make && su -c 'make install'"
        echo "in the Mesa directory."

        if test -r /sbin/ldconfig; then
                echo "You may also need to run /sbin/ldconfig as root"
                echo "to update the system after installing Mesa."
                if test -r /etc/ld.so.conf; then
                if test -z "`grep /usr/local/lib /etc/ld.so.conf`"; then
                echo "(First, add '/usr/local/lib' to /etc/ld.so.conf if"
                echo "you installed Mesa under /usr/local, the default.)"
                fi
                fi
        fi
        echo "****************************************************"
dnl        AC_MSG_ERROR([couldn't find 3D graphics library])
fi
AC_SUBST(GLLIBS)

dnl -- Check for any particular functions in the GL libs:
save_LIBS="$LIBS"
LIBS="$GLLIBS $XLIBS $LIBS"
AC_CHECK_FUNCS(XMesaGetBackBuffer)
LIBS="$save_LIBS"

dnl ----

AC_CANONICAL_HOST

  
dnl ---------------------------------------------------------------------

dnl also check FFTW configure
dnl TODO: allow to choose a compiler, e.g. --with-fortran=f90   (setenv F77)

if test "$enable_fortran" = "yes"; then
  AC_MSG_CHECKING(whether we have a FORTRAN 77 compiler)
  AC_CHECK_PROGS(F77, f77 g77 xlf xlf77 fl32 fort77 fc cf77 frt f90 xlf90)
  AC_PROG_F77
  if test -n "$F77"; then
    if test -n "$GCC"; then
      AC_F77_LIBRARY_LDFLAGS
      ACX_F77_FUNC_MANGLE
      case $host_os in
        ultrix*)
          CC="$CC -Dmain=MAIN_"
          ;;
        osf*)
          CC="$CC -Dmain=MAIN__"
          ;;
        sunos*)
          CC="$CC -Dmain=MAIN_"
          ;;
      esac
    fi
    if test "$G77" = "yes"; then
       NEMO_FFLAGS="$NEMO_FFLAGS -fno-globals"
    fi
  else
    F77="echo"
    fortran=no
    AC_MSG_WARN(no FORTRAN compiler)
  fi
else
  F77="echo"
  fortran=no
  AC_MSG_WARN(no FORTRAN compiler)
fi

dnl Solaris gcc doesn't know -rdynamics, linux needs it for dlopen()
if test "$GCC" = "yes"; then
  NEMO_CFLAGS="$NEMO_CFLAGS -rdynamic -fwritable-strings"
fi
NEMO_CFLAGS="$NEMO_CFLAGS $prec_flag"


AC_MSG_CHECKING(whether we have PGPLOT)
if test -d "$PGPLOT_DIR"; then
      pgplot_dir="$PGPLOT_DIR"
else
      pgplot_dir="/usr/lib/pgplot"
fi
AC_ARG_WITH(pgplot-prefix, 
        [  --with-pgplot-prefix=PFX     Prefix where PGPLOT was installed], 
        pgplot_config_prefix="$withval", 
        pgplot_config_prefix="$pgplot_dir")

yapp_default="ps"
if test x$pgplot_config_prefix != x; then
        if test -f ${pgplot_config_prefix}/grfont.dat ; then
		PGPLOT_DIR="$pgplot_config_prefix"
		AC_SUBST(PGPLOT_DIR)
                PGPLOT_INCLUDE="-I$pgplot_config_prefix"
                PGPLOT_LIB="-L$pgplot_config_prefix"
                PGPLOT_LIB="$PGPLOT_LIB -lcpgplot -lpgplot"
dnl                CFLAGS="$PGPLOT_INCLUDE $CFLAGS"
                AC_DEFINE(HAVE_PGPLOT) 
                graphtype=pgplot
                AC_MSG_RESULT(yes)
		yapp_default="pgplot"

        else
                AC_MSG_RESULT(no)
                AC_MSG_WARN(could not find PGPLOT library)
        fi
fi



dnl ---------------------------------------------------------------------

dnl check if we have the Fortran (sigh) idate function:  == doesn't work == 
dnl == doesn't work - confusion with pgplot stuff ==

dnl if test -n "$F77"; then
dnl         AC_LANG_SAVE
dnl         AC_LANG_FORTRAN77
dnl         AC_MSG_CHECKING([for Fortran idate function])
dnl         AC_TRY_LINK(,[idate(imon,iday,iyear)],[AC_DEFINE(HAVE_IDATE)
dnl                 AC_MSG_RESULT(yes)],AC_MSG_RESULT(no))
dnl         AC_LANG_RESTORE
dnl fi        

dnl ---------------------------------------------------------------------

LOADOBJ_MACH=""
LOADOBJ_LIBS=""

echo "Trying to find LOADOBJ options for $host_os ; host=$host"

case $host_os in
      linux*)
	LOADOBJ_MACH="-Dlinux -DSYSV"
	LOADOBJ_LIBS=-ldl
	;;
      solaris*)
	LOADOBJ_MACH="-Dsun4 -DSOLARIS -DSYSV"
	LOADOBJ_LIBS=-ldl
        ;;
      irix*)
	;;
esac

AC_SUBST(LOADOBJ_MACH)
AC_SUBST(LOADOBJ_LIBS)

#
# Find math library, and add ccmalloc support if needed
#
MATH_LIBS=''
AC_CHECK_LIB(m,sqrt,MATH_LIBS="-lm",,)

if test "$with_ccmalloc" = "yes"; then
  MATH_LIBS="-lccmalloc $MATH_LIBS"
fi
AC_SUBST(MATH_LIBS)

dnl ---------------------------------------------------------------------


AC_MSG_CHECKING(whether we have HDF)
AC_ARG_WITH(hdf-prefix, 
        [  --with-hdf-prefix=PFX     Prefix where HDF was installed], 
        hdf_config_prefix="$withval", 
        hdf_config_prefix="/usr/local")
dnl			this assumes people will use include <hdf.h>, not <hdf/hdf.h>
hdf=$hdf_config_prefix
for dir in $hdf $hdf/include $hdf/hdf $hdf/include/hdf
    do
	if test -f $dir/hdf.h; then
		HDF_INC="-I$dir"
		break;
	fi
    done

if test "X$HDF_INC" != "X"; then
    HDF_LIB="-L$hdf -ldf -ljpeg -lz"
    AC_DEFINE(HAVE_HDF)
    AC_MSG_RESULT(yes: hdf4)    
else
    HDF_INC=""
    HDF_LIB=""
    AC_MSG_RESULT(no)
    AC_MSG_WARN(could not find HDF library)
fi   

AC_SUBST(HDF_INC)
AC_SUBST(HDF_LIB)

dnl##--------------------------------------------------------------------

AC_MSG_CHECKING(whether we have CFITSIO)
AC_ARG_WITH(cfitsio-prefix, 
        [  --with-cfitsio-prefix=PFX     Prefix where CFITSIO was installed], 
        cfitsio_config_prefix="$withval", 
        cfitsio_config_prefix="/usr/local")

if test x$cfitsio_config_prefix != x; then
    cdir="$cfitsio_config_prefix"
    found="no"
    for dir in $cdir $cdir/include $cdir/include/cfitsio
      do
        if test -f ${dir}/fitsio.h ; then
                CFITSIO_INC="-I${dir}"
                CFITSIO_LIB="-L$cfitsio_config_prefix/lib"
                CFITSIO_LIB="$CFITSIO_LIB -lcfitsio"
                AC_DEFINE(HAVE_LIBCFITSIO) 
                AC_MSG_RESULT(yes)
                found="yes"
                break;
        fi
      done
    if test "$found" = "no"; then
      AC_MSG_RESULT(no)
      AC_MSG_WARN(could not find CFITSIO library...)
    fi
    
fi

AC_SUBST(CFITSIO_INC)
AC_SUBST(CFITSIO_LIB)

dnl##--------------------------------------------------------------------

AC_MSG_CHECKING(almost whether we have LAM/MPI)
AC_MSG_RESULT(not yet)

dnl##--------------------------------------------------------------------

AC_MSG_CHECKING(whether we have PVM_ROOT and PVM_ARCH)

if test -d "$PVM_ROOT"; then
  PVM_LIB="-L$PVM_ROOT/lib/$PVM_ARCH -lpvm3 -lgpvm3"
  PVM_INC="-I$PVM_ROOT/include"
  AC_MSG_RESULT(yes)
else
  PVM_LIB=""
  PVM_INC=""
  AC_MSG_RESULT(no)
fi
AC_SUBST(PVM_LIB)
AC_SUBST(PVM_INC) 
dnl##--------------------------------------------------------------------

AC_MSG_CHECKING(whether we have MIRIAD)
if test -d "$MIR"; then
  mir="$MIR"
else
  mir="/usr/local/miriad/current"
fi

AC_ARG_WITH(miriad-prefix, 
        [  --with-miriad-prefix=MIRIAD    Directory where MIRIAD was installed], 
        miriad_config_prefix="$withval", 
        miriad_config_prefix="$mir")
if test -f ${miriad_config_prefix}/src/inc/maxdim.h ; then
        MIRIAD_INC="-I$miriad_config_prefix/src/inc -I$miriad_config_prefix/src/subs"
        MIRIAD_LIB="-L$miriad_config_prefix/lib"
        MIRIAD_LIB="$MIRIAD_LIB -lmir"
        AC_DEFINE(_WITH_MIRIAD) 
        AC_DEFINE(_WITH_MIRIAD_BIMA)
        AC_MSG_RESULT(yes: bima-miriad)
elif test -f ${miriad_config_prefix}/inc/maxdim.h ; then
	MIRIAD_INC="-I$miriad_config_prefix/inc -I$miriad_config_prefix/subs"
        MIRIAD_LIB="-L$miriad_config_prefix/lib"
        MIRIAD_LIB="$MIRIAD_LIB -lmir"
        AC_DEFINE(_WITH_MIRIAD) 
        AC_DEFINE(_WITH_MIRIAD_ATNF)
        AC_MSG_RESULT(yes: atnf-miriad)
else
        MIRIAD_INC=""
        MIRIAD_LIB=""
        AC_MSG_RESULT(no)
        AC_MSG_WARN(could not find MIRIAD library...)
fi
AC_SUBST(MIRIAD_INC)
AC_SUBST(MIRIAD_LIB)

dnl##--------------------------------------------------------------------
dnl##
dnl## GSL  (GNU Scientific Library)
dnl##
dnl##  also need to find out a way to replace -lgslcblas with -lcblas
dnl##  or if ATLAS has been installed, with -lcblas -latlas
dnl## --  Also note the -DHAVE_GSL is a bit of a kludge, since i cannot
dnl## --  figure out how to do this properly through config.h
dnl##--------------------------------------------------------------------

AC_ARG_ENABLE(gsl, [  --disable-gsl   don't use any GSL], ok=$enableval, ok=yes)

if test "$ok" = "yes"; then
  AM_PATH_GSL(0.9.2, ok=yes, ok=no)
  if test "$ok" = "yes"; then
    GSL_CFLAGS="$GSL_CFLAGS -DHAVE_GSL"
    AC_DEFINE(HAVE_LIBGSL)
  else
    AC_MSG_WARN([could not find GSL library])
  fi
fi

AC_SUBST(GSL_CFLAGS)
AC_SUBST(GSL_LIBS)

dnl##--------------------------------------------------------------------
dnl##
dnl## PGPLOT parameters
dnl##
dnl##--------------------------------------------------------------------
if test -n "$option_pgplot_link_flags"; then
    PGPLOTINCLFLAGS="$option_pgplot_incl_flags"
    PGPLOTLINKFLAGS="$option_pgplot_link_flags"
    if test -n "$option_pgplot_link_search"; then
        PGPLOTLINKSEARCH="$option_pgplot_link_search"
    else
        PGPLOTLINKSEARCH=""
    fi
else
    PGPLOTINCLFLAGS=""
    PGPLOTLINKFLAGS=""
    PGPLOTLINKSEARCH=""
fi


dnl AC_CHECK_FUNC(vprintf, AC_DEFINE(HAVE_VPRINTF))
dnl if test "$ac_cv_func_vprintf" != yes; then

dnl AC_CHECK_FUNC(_doprnt, AC_DEFINE(HAVE_DOPRNT))
dnl fi
dnl ---------------------------------------------------------------------



AC_CHECK_LIB(df, DFSDndataset)
AC_CHECK_LIB(readline, read_history)
AC_CHECK_LIB(vogl, foreground)
AC_CHECK_LIB(z, inflate)
AC_CHECK_LIB(c, strtoll)
AC_CHECK_LIB(c, strtoull)

AC_CHECK_LIB(dl, dlopen)	# Dynamic linking for SunOS/Solaris and SYSV
AC_CHECK_LIB(dld, shl_load)	# Dynamic linking for HP-UX


dnl AC_CHECK_LIB(utils, main)
dnl Replace `main' with a function in -lvogl:


dnl##	this doesn't seem to work, since gsl linkeage also need libcblas etc...
dnl AC_CHECK_LIB(gsl,gsl_version)
dnl##   hmm, but this does not seem to work either....
dnl AC_CHECK_LIB(gsl, main)
AC_SEARCH_LIBS(sin, m)
AC_SEARCH_LIBS(cblas_daxpy, gslcblas)
AC_SEARCH_LIBS(gsl_version, gsl)

dnl AC_CHECK_LIB(c, strsignal)

dnl Checks for header files.


AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h sgtty.h strings.h sys/file.h sys/ioctl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_TYPE_GETGROUPS
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_TYPE_SIGNAL
AC_FUNC_VFORK
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(ftime gethostname gettimeofday getwd mkdir select strdup strtod strtol strtoul dprintf)

AC_C_BIGENDIAN

dnl -- some final YAPP stuff

AC_ARG_WITH(yapp,
	[  --with-yapp=YAPPNAME    Yapp module to make default],
	yapp_name="$withval",
	yapp_name="$yapp_default")

YAPP_NAME="$yapp_name"

AC_MSG_CHECKING(looking for a reasonable YAPP)
case $yapp_name in
        ps)
          YAPP_LIBS=""
	  YAPP_DEF="yapp.ps"
          ;;
	pgplot)
	  YAPP_LIBS="-L$PGPLOT_DIR -lpgplot $XLIBS $FLIBS"
	  YAPP_DEF="/xs"
          ;;
esac
AC_MSG_RESULT($YAPP_NAME)

AC_SUBST(YAPP_NAME)
AC_SUBST(YAPP_LIBS)
AC_SUBST(YAPP_DEF)

if test -d "$NEMODAT"; then
  echo "*** Warning: NEMO=$NEMO, maybe you are running NEMO already"
  echo "*** you probably should source $NEMO/nemo_end"
fi


AC_OUTPUT(NEMORC.gen Makefile makedefs nemo_start)

echo "
-------------------------------------------------------------------------
All done, continue with your installation now as described in the
output from the command

     make install

Note that this command actually does not install NEMO yet, but merely
tells you what to do in which order. The recommended procedure is using
the bootstrap script in NEMO/src/scripts.
-------------------------------------------------------------------------
"

