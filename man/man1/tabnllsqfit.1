.TH TABNLLSQFIT 1NEMO "14 February 2003"
.SH NAME
tabnllsqfit \- general purpose non-linear least squares fitting program
.SH SYNOPSIS
.PP
\fBtabnllsqfit in=\fPtable-file [parameter=value]
.SH DESCRIPTION
\fBtabnllsqfit\fP takes a non-linear least squares fit (minimized ChiSquared)
of a set of datapoints (x(i),y(i)) where a functional
form y=f(x;a0,a1,...,an) is assumed. The function is not required to
be non-linear in it parameters. Although a number of common pre-defined
functional forms can be selected (see \fBfit=\fP), you can also write
a small C routine, and dynamically load the fitted function during
runtime (see \fBload=\fP).
.PP
The inputfile is an ascii file in a tabular format, where on every line
there must be an assigned column for the X- and Y-coordinate(s). 
An optional column can be assigned to the errors in Y 
(the DY-coordinates, the inverse square of these being used as
a weight). If no
DY-column is assigned, it is assumed that the errors in Y are all the
same and equal to 1. Lines starting with the '#' symbol are comment 
lines. Certain models (see \fBfit=\fP below) allow multiple X or Y
columns. 
.PP
Each fit can also produce an output file with an additional column
computing the difference between the data and the model (in that order).
In the special case where the user has supplied no free parameters,
the residuals are still computed correctly.
.SH PARAMETERS
The following parameters are recognized in any order if the keyword is also
given:
.TP 20
\fBin=\fIin-file\fP
(ascii) input file, a table of values from which data is taken. No default.
.TP
\fBxcol=\fIcol,...\fP
The column(s) from which the (independant) X-values are taken. The first column
is numbered 1 [default: \fB1\fP].
.TP
\fBycol=\fIcol,...\fP
The column(s) from which the (dependant) Y-values are taken 
[default: \fB2\fP].
.TP
\fBdycol=\fIint\fP
Optional column from which the DY-values (errors in Y) are taken. The
inverse square of the errors are uses as weights for those fits where
these are used 
[default: none assigned].
.TP
\fBxrange=\fIxmin:xmax\fP
Range in X-values for which the fit is done. If only one number is
given, the other one is considered zero. This keyword cannot be used
if more than one X-column is used.
[default: no entry, i.e. all].
.TP
\fBfit=\fP\fImodel\fP
Model name what to fit. Currently implemented are \fIline\fP, \fIplane\fP,
\fIpoly\fP, \fIgauss\fP, and \fIexp\fP.
[default: \fBline\fP].
.TP
\fBorder=\fP\fIorder\fP
Highest order of the polynomial fit (\fBfit=poly\fP) or 
number of dimension of the hyper-plane fit (\fBfit=plane\fP). 0 would fit
a constant. 
[Default: \fB0\fP].
.TP
\fPout=\fIfilename\fP
Optional output filename
where the data and residuals are stored.
The first few columns contain the X and Y columns, the last
column contains the residual Y-F(X)
[default: no output file created].
.TP
\fPnsigma=\fIsigma_factor\fP
A positive number will delete points more than \fIsigma_factor\fP from the fit,
and fit again. Multiple values can be given here, in which case
multiple iterations are done.
[Default: \fB-1\fP].
.TP
\fBpar=\fP
Initial estimates for the parameters. For non-linear fits, or linear fits where
certain parameters are fixed (see \fBfree=\fP below) they need to be given here.
By default they are all 0.
.TP
\fBfree=\fP
A list of 1's and 0's to set which parameters are to be kept free (1) and which
are fixed (0). By default all parameters are free, i.e. fitted. If any
parameter is fixed, initial estimates for all need to be given (see \fBpar=\fP).
Default: all parameters free.
.TP
\fBload=\fP
If given, this should contain the full path to a compiled and 
shared object (.so) file) that contains the function to be fitted 
in terms of the \fInllsqfit\fP parameters \fIf\fP and \fIdf\fP. They
must be named \fBfunc_loadobj\fP and \fBderv_loadobj\fP
(maybe modified with fit=). **under development**
.TP
\fBx=\fP
If given, these are the X-values for which the load function can be tested.
It is useful for testing and debugging your function. It will report
the X, Y and the dY/dPAR vector values. The program will exit after
this, and no fitting is done.
Default: none.
.TP
\fBnmax=\fP\fImax_lines\fP
Maximum number of lines allocated if the input file was being read
from a pipe. If not, the routine \fIfile_lines(3NEMO)\fP is used
to allocate space for the table.
[Default: \fB10000\fP].
.TP
\fBtol\fP=
Tolerance for convergence of \fInllsqfit\fP
[Default: \fB0.0\fP].
.TP
\fBlab\fP=
Mixing parameter for \fInllsqfit\fP [Default: \fB0.0\fP for linear,
\fB0.1\fP for non-linear fits].
.TP
\fBitmax\fP=
Maximum number of allowed \fInllsqfit\fP iterations [Default: \fB50\fP]
.SH FIT PARAMETERS
Parameters are referred to as p0,p1,p2,p3,.....
.nf
.ta +1.5i
line     	y=p0+p1*x                        (same as poly,order=1)
plane       	z=p0+p1*x+p2*y                   (example order=2)
polynomial  	y=p0+p1*x+p2*x^2+p3*x^3...       (example order=3)
gauss       	y=p0+p1*exp(-(x-p2)^2/(2*p3^2))
exp		y=p0+p1*exp(-(x-p2)/p3)
arm		y=p0+p1*cos(x)+p2*sin(x)
arm3		y=p0+p1*cos(x)+p2*sin(x)+p3*cos(3*x)+p4*sin(3*x) 
.fi
.SH EXAMPLE
Here is an example of a linear fit: a straight 
line, with some added noise and random weights between 1 and 2:
.nf
% nemoinp 1:100 |\\
	tabmath - - "%1+rang(0,10),ranu(1,2)" seed=123 |\\
	tabnllsqfit - 1 2 3
nrt=0
Fitting a+bx:  
a= 1.87458 2.29818 
b= 0.961672 0.0398614
.fi
Here is an example of a 2D plane  in 3D: (1+2x+3y)
.nf

% ccdmath "" - '1+2*%x+3*%y+rang(0,0.1)' 5,5 seed=123 |\\
	ccdprint - x= y= label=x,y newline=t |\\
	tabnllsqfit - 1,2 3 fit=plane order=2
nrt=0
Fitting p0+p1*x1+p2*x2+.....pN*xN: (N=2)
p0= 1.0688 0.0523819
p1= 2.01497 0.0165646
p2= 2.97436 0.0165646


.fi
And a fit to a gaussian:
.nf
% nemoinp 1:100 |\\
	tabmath - - '4+exp(-(%1-50)**2/(200))+ranu(0,1)' seed=123 |\\
	tabnllsqfit - fit=gauss par=4,1,50,10
nrt=13
Fitting a+b*exp(-(x-c)^2/(2*d^2)):  
a= 4.46714 0.0416026 
b= 1.13036 0.0994723 
c= 50.2263 0.845469
d= 8.70728  0.959347


.fi
Here is a contrived example of plotting the function to be plotted, by fixing all
parameters and computing a residual table from 0s:
.nf

% nemoinp 0:10:0.1 | tabmath - tab0 0
% tabnllsqfit tab0 1 2 fit=gauss par=1,2,5,1 free=0,0,0,0 out=tab0.d
% tabmath tab0.d - %1,-%3 | tabplot -

.fi

Here is an example of removing outlier points and fitting again:

.nf

% nemoinp 1:10 |\\
   tabmath - - '2*%1+1+rang(0,0.1)' seed=123 |\\
   tabnllsqfit - fit=line nsigma=1.5::3
nrt=0
Fitting a+bx:  
a= 1.09548 0.0775617 
b= 1.99937 0.0125002
2/10 points outside 1.5*sigma (0.152328)
nrt=0
Fitting a+bx:  
a= 1.02651 0.0452119 
b= 2.01358 0.00753531
0/8 points outside 1.5*sigma (0.080422)

.fi
Although 3 iterations were requested, after the first iteration no more
points were removed, and the iterations were stopped.

.SH LOAD FUNCTIONS
With the \fBload=\fP keyword dynamic object files can be loaded using the
\fIloadobj(3NEMO)\fP mechanism. The convention is that two functions
must be externally visible, and named \fIfunc_\fP\fImethod\fP and
\fIderv_\fP\fImethod\fP  (where \fImethod\fP is the same as the
\fBfit=\fP keyword.
.PP
Here is an example of the file \fBmyline.c\fP that can
be used with \fBfit=line load=myline\fP and compiled with
.nf
	bake myline.so
.fi

.nf

/* File:  myline.c  */

#include <stdinc.h>

real func_line(real *x, real *p, int np) 
{
  return p[0] + p[1]*x[0];
}
void derv_line(real *x, real *p, real *e, int np) 
{
  e[0] = 1.0;
  e[1] = x[0];
}


.fi
.SH CAVEATS
It will not recognize linear fits if the non-linear parameters are kept fixed,
e.g. the offset p0 in fit=gauss.
.SH SEE ALSO
tablsqfit(1NEMO),hist(1NEMO), tabmath(1NEMO), 
gaussfit(1NEMO), linreg(1NEMO), nllsqfit(3NEMO), fit(DC1)
.nf
\fINumerical Recipies in C, Ch.14\fP
NLREG: http://www.nlreg.com
NIST non-linear: http://www.itl.nist.gov/div898/strd/lls/lls.shtml
NIST linear: http://www.itl.nist.gov/div898/strd/nls/nls_main.shtml
.fi
.SH AUTHOR
Peter Teuben
.SH FILES
.nf
.ta +2.5i
~/src/kernel/tab	tabnllsqfit.c
.fi
.SH "UPDATE HISTORY"
.nf
.ta +1.0i +4.0i
12-jul-02	V1.0 cloned off tablsqfit	PJT
17-jul-02	V1.1 added load=, x=, numrec=		PJT
11-sep-02	V1.1e  changes error/warning to accomodate residual writen	PJT
21-nov-02	V1.4 nsigma= can be an array of iterations	PJT
14-feb-03	V1.6 arm,arm3 for Rahul		PJT
.fi

