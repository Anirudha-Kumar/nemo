

# handy for recursion
@SET_MAKE@

# Compilers:

CC  = @CC@
FC  = @F77@
F77 = @F77@
CXX = @CXX@

# HDF library

#HDFINC=-I/local/include -I/usr/local/include -I/usr/include/hdf
#
#HDFLIB=-ldf -lz
#  Might need to add something like:   -L/local/lib -R /local/lib
#  if your solaris system requires that
#HDFLIB=-ldf -ljpeg -lz

HDFINC = @HDF_INC@
HDFLIB = @HDF_LIB@

#  PVM library

PVMINC = @PVM_INC@
PVMLIB = @PVM_LIB@


#  CFITSIO library
FITSIOINC = @FITSIO_INC@
FITSIOLIB = @FITSIO_LIB@

#			miriad 
#	(could also depend on $(MIR) and $(MIRLIB) if you don't like these)
MIRIAD_INC = @MIRIAD_INC@
MIRIAD_LIB = @MIRIAD_LIB@



# LOADOBJ stuff; -DMACH=.....

MACH = @LOADOBJ_MACH@


# 	Fortran: you need FLIBS if you link using 'cc' and link 
#	with (certain) fortran. See also F77_FUNC macros (config.h)
#	if you need to use fortran names from your C code, or if you
#	need to define C code that is to be called from Fortran
FLIBS = @FLIBS@
FORLIBS = $(FLIBS)

# Solaris 2.6+: -R /opt/SUNWspro/lib -L/opt/SUNWspro/lib -lF77 -lM77 -lV77 -lsunmath  

## C compiler:
#set opts="-rdynamic -ansi -fwritable-strings -Wconversion -Wnested-externs"
#exec gcc -fPIC -Dlinux -DSYSV -I$NEMOINC -I$NEMOLIB -L$NEMOLIB $opts $* $link

NEMO_CFLAGS = @NEMO_CFLAGS@ -I$(NEMOINC) -I$(NEMOLIB) @XINCS@ $(MACH)
NEMO_FFLAGS = @NEMO_FFLAGS@
NEMO_LDFLAGS = 
NEMO_LIBS   = -L$(NEMOLIB)          -lnemo @LOADOBJ_LIBS@ @MATH_LIBS@
NEMO_LIBSPP = -L$(NEMOLIB) -lnemo++ -lnemo @LOADOBJ_LIBS@ @MATH_LIBS@

#			some graphics libraries:
GLLIBS = @GLLIBS@
XLIBS = @XLIBS@

#			generic compile flags for C,Fortran,Linker
#   optimization only
OPT = @CFLAGS@
FOPT = @FFLAGS@
LOPT = @LDFLAGS@
#   everything 
CFLAGS = $(OPT) $(NEMO_CFLAGS)
FFLAGS = $(OPT) $(NEMO_FFLAGS)
LDFLAGS = $(OPT) $(NEMO_LDFLAGS)
CPPFLAGS = @CPPFLAGS@

RANLIB = @RANLIB@

# -----------------------------------------------------------------------------
#  rules

.SUFFIXES:  .so .doc

#	NEMO compile rules

.o.a:
	@echo "***Skipping ar for $* at this stage"

.c.o:
	$(CC) $(CFLAGS) $(LOCAL_INC) -c $<

.cc.o:
	$(CXX) $(CFLAGS) $(LOCAL_INC) -c $<

.c.so:
	$(CC) $(CFLAGS) $(LOCAL_INC) -c $<
	ldso $*

.f.so:
	$(FC) $(FFLAGS) -c $<
	ldso $*

.c.a:
	$(CC) $(CFLAGS) $(LOCAL_INC) -c $<

.c:
	$(CC) $(CFLAGS) $(LOCAL_INC) -o $* $*.c $(NEMO_LIBS) $(LOCAL_LIB) $(FORLIBS) $(EL)

.cc:
	$(CXX) $(CFLAGS) $(LOCAL_INC) -o $* $*.c $(NEMO_LIBSPP) $(LOCAL_LIB) $(FORLIBS) $(EL)

.o:
	$(CC) $(CFLAGS) $(LOCAL_INC) -o $* $*.o $(NEMO_LIBS) $(LOCAL_LIB) $(FORLIBS) $(EL)


# -----------------------------------------------------------------------------


# some fortran code needs a REAL FUNCTIONS SECOND (e.g. scfm)
# this macro should point to the .o file (if needed)
# Sometimes it is FORLIBS, sometimes your etime.o or second.o

# On Solaris you need second.o; Linux can keep it blank (it's in libg2c)
# SECOND = $(NEMOLIB)/second.o


makedefs_help:
	@echo ========================================================================
	@echo NEMOVER=$(NEMOVER)
	@echo CC=$(CC)
	@echo CFLAGS=$(CFLAGS)
	@echo CPP=$(CPP)
	@echo CPPFLAGS=$(CPPFLAGS)
	@echo CXX=$(CXX)
	@echo CXXFLAGS=$(CXXFLAGS)
	@echo F77=$(F77)
	@echo FFLAGS=$(FFLAGS)
	@echo DEFS=$(DEFS)
	@echo CFLAGS=$(CFLAGS)
	@echo FFLAGS=$(FFLAGS)
	@echo LDFLAGS=$(LDFLAGS)
	@echo FC=$(F77)
	@echo LN_S=$(LN_S)
	@echo GLLIBS=$(GLLIBS)
	@echo XLIBS=$(XLIBS)
	@echo LIBS=$(LIBS)
	@echo RANLIB=$(RANLIB)
	@echo YAPPLIB=$(YAPPLIB)
	@echo ========================================================================




