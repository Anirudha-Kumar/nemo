# -*- makefile -*-
################################################################################
#
# make/public for the falcON N-body project
#
################################################################################

# ------------
# from WDutils
# ------------

Pi_h			:= $(IUTI)Pi.h
inline_h		:= $(IUTI)inline.h
inline_io_h		:= $(IUTI)inline_io.h
traits_h		:= $(IUTI)traits.h
tupel_h			:= $(IUTI)tupel.h $(IUTI)tupel.cc $(traits_h)
exception_h		:= $(IUTI)exception.h $(traits_h)
WDMath_h		:= $(IUTI)WDMath.h $(Pi_h) $(exception_h)
memory_h		:= $(IUTI)memory.h $(exception_h) $(inline_h)
numerics_h		:= $(IUTI)numerics.h $(inline_h) $(memory_h) $(tupel_h)
spline_h		:= $(IUTI)spline.h $(numerics_h) $(memory_h)
random_h_util		:= $(IUTI)random.h $(inline_h) $(Pi_h) $(traits_h)

# -----------------------
# header dependency lists
# -----------------------

utils_h			:= $(traits_h) $(Pi_h) $(inline.h) $(inline_io.h) \
			   $(tupel_h) $(exception_h) $(memory_h)
basic_h			:= $(IPUB)basic.h $(utils_h)
tensor_h		:= $(IPUB)tensor.h $(utils_h) $(IPUB)tensor.cc
tensor_set_h		:= $(IPUB)tensor_set.h $(tensor_h) $(simd_h) \
			   $(IPUB)tensor_set.cc
types_h			:= $(IPUB)types.h $(basic_h) $(tensor_h)
default_h		:= $(IPUB)default.h $(types_h)
interact_h		:= $(IPUB)interact.h $(basic_h)
fields_h		:= $(IPUB)fields.h $(types_h)
ifdef DPROPER
peano_h			:= $(IPRO)peano.h $(types_h)
simd_h			:= $(IPRO)simd.h $(basic_h)
endif
io_h			:= $(IPUB)io.h $(fields_h)
body_h			:= $(INC)body.h $(fields_h)
externacc_h		:= $(INC)externacc.h $(body_h)
tree_h			:= $(IPUB)tree.h $(default_h) $(body_h) $(peano_h)
partner_h		:= $(IPUB)partner.h $(tree_h)
gravity_h		:= $(IPUB)gravity.h $(tree_h) $(tensor_set_h)
kernel_h		:= $(IPUB)kernel.h $(gravity_h) $(simd_h)
FAlCON_h		:= $(INC)FAlCON.h $(types_h) $(default_h) $(body_h) \
			   $(IPUB)FAlCON.cc $(gravity_h) $(partner_h) $(sph_h)
FAlCON_C_h		:= $(INC)FAlCON_C.h
main_h			:= $(INC)main.h  $(body_h)
nbody_h			:= $(IPUB)nbody.h $(body_h) $(externacc_h)
manip_h			:= $(IPUB)manip.h $(body_h)
defman_h		:= $(IPUB)defman.h $(manip_h)
profile_h		:= $(IPUB)profile.h $(body_h)
tools_h			:= $(IPUB)tools.h $(body_h) $(bodyfunc_h)
random_h		:= $(IPUB)random.h $(random_h_util)
sample_h		:= $(IPUB)sample.h $(body_h) $(random_h)
gamma_h			:= $(IPUB)gamma.h $(basic_h) $(sample_h)
king_h			:= $(IPUB)king.h
bodyfunc_h		:= $(IPUB)bodyfunc.h $(body_h) 
bodyduncdefs_h		:= $(IPUB)bodyfuncdefs.h $(body_h) 
neighbours_h		:= $(IPUB)neighbours.h $(tree_h)

# -----------------------
# source dependency lists
# -----------------------

basic_cc		:= $(SPUB)basic.cc $(basic_h)
body_cc			:= $(SPUB)body.cc $(body_h) $(io_h) $(numerics)
io_cc			:= $(SPUB)io.cc $(io_h) $(basic_h)
kernel_cc		 = $(SPUB)kernel.cc $(kernel_h) $(kernel_pro)
partner_cc		:= $(SPUB)partner.cc $(partner_h) $(interact_h)
gravity_cc		:= $(SPUB)gravity.cc $(gravity_h) $(kernel_h) \
			   $(interact_h) $(numerics_h) $(gravity_pro)
tree_cc			:= $(SPUB)tree.cc $(tree_h) $(body_h) $(memory_h)
nbody_cc		:= $(SPUB)nbody.cc $(nbody_h) $(io_h)
manip_cc		:= $(SPUB)manip.cc $(manip_h)
FAlCONC_cc		:= $(SPUB)FAlCONC.cc $(FAlCON_C_h) $(FAlCON_h)
tools_cc		:= $(SPUB)tools.cc $(tools_h) $(Pi_h) $(memory_h)
profile_cc		:= $(SPUB)profile.cc $(profile_h) $(Pi_h) $(numerics_h)
sample_cc		:= $(SPUB)sample.cc $(sample_h) $(basic_h) $(numerics_h)
gamma_cc		:= $(SPUB)gamma.cc $(gamma_h) $(numerics_h)
king_cc			:= $(SPUB)king.cc $(king_h) $(numerics_h)
bodyfunc_cc		:= $(SPUB)bodyfunc.cc $(bodyfunc_h) $(bodyfuncdefs_h) 
neighbours_cc		:= $(SPUB)neighbours.cc $(neighbours_h) $(interact_h)

# ---------------
# library modules
# ---------------

$(LIB)basic.o:		$(basic_cc) $(makepublic)
			./make/dir $(BIN) 755
			./make/dir $(LIB) 755
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)body.o:		$(body_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)tree.o:		$(tree_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)gravity.o:	$(gravity_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)partner.o:	$(partner_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
ifdef NEMO
$(LIB)io.o:		$(io_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)manip.o:		$(manip_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)bodyfunc.o:	$(bodyfunc_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)neighbours.o:	$(neighbours_cc) $(makeproper)
			$(MAKE_OBJ)
endif
$(LIB)nbody.o:		$(nbody_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)FAlCONC.o:	$(FAlCONC_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
ifdef DSSE
$(LIB)kernel.o:		$(kernel_cc) $(makepublic)
			$(MAKE_OBJ) $(NOSSE) $(NBDYFLAGS)
else
$(LIB)kernel.o:		$(kernel_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
endif
$(LIB)profile.o:	$(profile_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)tools.o:		$(tools_cc) $(makepublic)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)sample.o:		$(sample_cc) $(makepublic)
			$(MAKE_OBJ) $(DNEMO)
$(LIB)gamma.o:		$(gamma_cc) $(makepublic)
			$(MAKE_OBJ)
$(LIB)king.o:		$(king_cc) $(makepublic)
			$(MAKE_OBJ)

ifdef NEMO
public_objs	 :=	$(LIB)basic.o $(LIB)body.o $(LIB)tree.o \
			$(LIB)gravity.o $(LIB)kernel.o $(LIB)io.o \
			$(LIB)partner.o $(LIB)nbody.o $(LIB)FAlCONC.o \
			$(LIB)tools.o $(LIB)sample.o $(LIB)manip.o \
			$(LIB)profile.o $(LIB)bodyfunc.o $(LIB)neighbours.o 

else
public_objs	 :=	$(LIB)basic.o $(LIB)body.o $(LIB)tree.o \
			$(LIB)gravity.o $(LIB)kernel.o $(LIB)partner.o \
			$(LIB)nbody.o $(LIB)FAlCONC.o $(LIB)sample.o \
			$(LIB)neighbours.o

endif

ifdef STATIC

falcON		:=	$(LIB)libfalcON.a

else

falcON		:=	$(LIB)libfalcON.so

endif

library		:	$(falcON)

# -----
# mains
# -----

$(BIN)TestGrav:		$(EXE)TestGrav.cc $(main_h) $(body_h) $(FAlCON_h) \
				$(Pi_h) $(numerics_h) $(basic_h) $(makepublic)
			$(MAKE_EXE) $(NBDYFLAGS) $(LFALCON) -lm
$(BIN)TestGravC:	$(EXE)TestGravC.c $(falcON) $(makepublic)
			$(MAKE_EXE_C) $(NBDYFLAGS) $(LFALCON) -lstdc++ -lm
$(BIN)TestGravF:	$(EXE)TestGravF.F $(falcON) $(makepublic)
			$(MAKE_EXE_F) $(NBDYFLAGS) $(LFALCON) -lstdc++ -lm

$(BIN)TestPair:		$(EXE)TestPair.cc $(main_h) $(body_h) $(FAlCON_h) \
				$(makepublic)
			$(MAKE_EXE) $(NBDYFLAGS) $(LFALCON) -lm
$(BIN)TestPairC:	$(EXE)TestPairC.c $(falcON) $(makepublic)
			$(MAKE_EXE_C) $(NBDYFLAGS) $(LFALCON) -lstdc++ -lm
$(BIN)TestPairF:	$(EXE)TestPairF.F $(falcON) $(makepublic)
			$(MAKE_EXE_F) $(NBDYFLAGS) $(LFALCON) -lstdc++ -lm

ifdef NEMO


$(BIN)a2s:		$(EXE)a2s.cc $(main_h) $(inline_io_h) $(io_h) \
				$(body_h) $(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)addgravity:	$(EXE)addgravity.cc $(body_h) $(externacc_h) $(main_h) \
				$(FAlCON_h) $(io_h) $(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)density:		$(EXE)density.cc $(main_h) $(neighbours_h) $(makeproper)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)getgravity:	$(EXE)getgravity.cc $(main_h) $(FAlCON_h) $(io_h) \
				$(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)gyrfalcON:	$(EXE)gyrfalcON.cc $(main_h) $(nbody_h) $(manip_h) \
				$(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)lagrange_radii:	$(EXE)lagrange_radii.cc $(main_h) $(body_h) $(io_h) \
				$(inline_io_h) $(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)manipulate:	$(EXE)manipulate.cc $(main_h) $(manip_h) \
				$(io_h) $(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)mkbodiesfunc:	$(EXE)mkbodiesfunc.cc $(main_h) $(bodyfunc_h) \
				$(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)mkbodyfunc:	$(EXE)mkbodyfunc.cc $(main_h) $(bodyfunc_h) \
				$(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)mkdehnen:		$(EXE)mkdehnen.cc $(main_h) $(gamma_h) \
				$(io_h) $(LIB)gamma.o $(makepublic)
			$(MAKE_EXE) $(LIB)gamma.o $(NEMO_EXE_FLGS)
$(BIN)mkking:		$(EXE)mkking.cc $(main_h) $(body_h) $(king_h) \
				$(io_h) $(random_h) $(Pi_h) $(LIB)king.o \
				$(makepublic)
			$(MAKE_EXE) $(LIB)king.o $(NEMO_EXE_FLGS)
$(BIN)mkplum:		$(EXE)mkplum.cc $(main_h) $(sample_h) $(io_h) \
				$(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)s2a:		$(EXE)s2a.cc $(main_h) $(body_h) $(inline_io_h) \
				$(io_h) $(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)scale_eps:	$(EXE)scale_eps.cc $(main_h) $(body_h) $(io_h) \
				$(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)set_time:		$(EXE)set_time.cc $(body_h) $(main_h) $(io_h) \
				$(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)snapfilter:	$(EXE)snapfilter.cc $(main_h) $(bodyfunc_h) \
				$(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)snapprop:		$(EXE)snapprop.cc $(main_h) $(bodyfunc_h) $(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)symmetrize:	$(EXE)symmetrize.cc $(main_h) $(body_h) $(io_h) \
				$(inline_io_h) $(makepublic)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
endif
# -----------
# executables
# -----------

TestGrav	:	$(falcON) $(BIN)TestGrav
TestGravC	:	$(falcON) $(BIN)TestGravC
TestGravF	:	$(falcON) $(BIN)TestGravF
TestPair	:	$(falcON) $(BIN)TestPair
TestPairC	:	$(falcON) $(BIN)TestPairC
TestPairF	:	$(falcON) $(BIN)TestPairF

ifdef NEMO

a2s		:	$(falcON) $(BIN)a2s
addgravity	:	$(falcON) $(BIN)addgravity
density		:	$(falcON) $(BIN)density
getgravity	:	$(falcON) $(BIN)getgravity
gyrfalcON	:	$(falcON) $(BIN)gyrfalcON
lagrange_radii	:	$(falcON) $(BIN)lagrange_radii
manipulate	:	$(falcON) $(BIN)manipulate
mkbodyfunc	:	$(falcON) $(BIN)mkbodyfunc
mkbodiesfunc	:	$(falcON) $(BIN)mkbodiesfunc
mkdehnen	:	$(falcON) $(BIN)mkdehnen
mkking		:	$(falcON) $(BIN)mkking
mkplum		:	$(falcON) $(BIN)mkplum
s2a		:	$(falcON) $(BIN)s2a
scale_eps	:	$(falcON) $(BIN)scale_eps
set_time	:	$(falcON) $(BIN)set_time
snapfilter	:	$(falcON) $(BIN)snapfilter
snapprop	:	$(falcON) $(BIN)snapprop
symmetrize	:	$(falcON) $(BIN)symmetrize

all_pub		:	TestGrav gyrfalcON a2s addgravity density \
			getgravity lagrange_radii manipulate mkbodiesfunc \
			mkbodyfunc \
			mkdehnen mkking mkplum s2a scale_eps \
			snapfilter snapprop symmetrize
man_pub	:
			-cp man/man1/* $(NEMO)/man/man1/

else

a2s		:
			@echo "ERROR: you need NEMO to make \"$@\""
addgravity	:
			@echo "ERROR: you need NEMO to make \"$@\""
density		:
			@echo "ERROR: you need NEMO to make \"$@\""
getgravity	:
			@echo "ERROR: you need NEMO to make \"$@\""
gyrfalcON	:
			@echo "ERROR: you need NEMO to make \"$@\""
lagrange_radii	:
			@echo "ERROR: you need NEMO to make \"$@\""
manipulate	:
			@echo "ERROR: you need NEMO to make \"$@\""
mkbodyfunc	:
			@echo "ERROR: you need NEMO to make \"$@\""
mkbodiesfunc	:
			@echo "ERROR: you need NEMO to make \"$@\""
mkdehnen	:
			@echo "ERROR: you need NEMO to make \"$@\""
mkking		:
			@echo "ERROR: you need NEMO to make \"$@\""
mkplum		:
			@echo "ERROR: you need NEMO to make \"$@\""
s2a		:
			@echo "ERROR: you need NEMO to make \"$@\""
scale_eps	:
			@echo "ERROR: you need NEMO to make \"$@\""
set_time	:
			@echo "ERROR: you need NEMO to make \"$@\""
snapfilter	:
			@echo "ERROR: you need NEMO to make \"$@\""
snapprop	:
			@echo "ERROR: you need NEMO to make \"$@\""
symmetrize	:
			@echo "ERROR: you need NEMO to make \"$@\""

all_pub		:	TestGrav

endif

# ---------------------
# doxygen documentation
# ---------------------

dox/html/index.html:	inc/utils/exception.h \
			inc/utils/inline.h \
			inc/utils/inline_io.h \
			inc/utils/traits.h \
			inc/utils/random.h \
			inc/utils/numerics.h \
			inc/utils/Pi.h \
			inc/utils/memory.h \
			inc/utils/WDMath.h \
			inc/public/types.h \
			inc/public/basic.h \
			inc/public/fields.h \
			inc/public/io.h \
			inc/public/profile.h \
			inc/body.h \
			inc/public/bodyfunc.h \
			inc/public/interact.h \
			inc/public/nbody.h \
			src/manips/set_subset.cc \
			src/manips/use_filter.cc \
			src/manips/set_centre.cc \
			src/manips/bound_centre.cc \
			src/manips/dens_centre.cc \
			src/manips/density.cc \
			src/manips/densprof.cc \
			src/manips/set_centre.cc \
			src/manips/sphereprof.cc \
			src/manips/projprof.cc \
			src/manips/lagrange.cc \
			src/manips/add_plummer.cc \
			src/manips/symmetrize_pairs.cc \
			src/manips/randomize_azimuth.cc
			doxygen dox/falcON.dox

doxu		:	dox/html/index.html

view_dox	:	doxu
			firefox dox/html/index.html

# --------
# cleaning
# --------

.PHONY		: 	cleanbackup cleanlib clean
cleanbackup:
			rm -f $(INC)*~ $(INC)*/*~ $(SRC)*/*~
cleanlib:
			rm -f $(LIB)* $(SRC)mains/*.f
clean:			
			rm -f $(INC)*~ $(INC)*/*~ $(SRC)*/*~ \
				$(LIB)* $(SRC)mains/*.f


ifndef PROPER

all		:	all_pub
man		:	man_pub

endif
