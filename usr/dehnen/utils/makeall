# -*- makefile -*-
################################################################################
#
# Makefile for WDutils
#
################################################################################

.PHONY		: test

# ----------------
# Compiler related
# ----------------

# GNU compiler
ifeq ($(COMPILER),gcc)
-include make.gcc
makefiles		:= makeall make.gcc
endif

# Portland group compiler
ifeq ($(COMPILER),pgi)
-include make.pgi
makefiles		:= makeall make.pgi
endif

# Pathscale compiler
ifeq ($(COMPILER),pth)
-include make.pth
makefiles		:= makeall make.pth
endif

# Sun compiler
ifeq ($(COMPILER),sun)
-include make.sun
makefiles		:= makeall make.sun
endif

# Intel compiler
ifeq ($(COMPILER),icc)
-include make.icc
makefiles		:= makeall make.icc
endif

# ---------
# MPI stuff
# ---------

ifdef WDutilsDevel
MPIDIR			:= $(shell ls | grep mpich)
ifeq ($(MPIDIR),mpich)
WDutilsMPI		:= -DWDutilsMPI
MPICC			:= $(MPIDIR)/bin/mpicc
MPIINC			:= $(MPIDIR)/include/
IMPI			:= -I$(MPIINC)
endif
endif

# -----------
# directories
# -----------

INC             	:= inc/
SRC             	:= src/
LIB			:= lib$(EXT)/
LIBT			:= $(LIB).dummy
$(LIBT)			:
			mkdir -p -m 755 $(LIB)
			touch $(LIBT)
ifdef WDutilsDevel
DEV			:= devel/
endif

# -------------------------
# compile and link commands
# -------------------------

CXXFLAGS		:= $(CXXFLAGS) $(WDutilsDevel)
LUTIL			:= -L$(LIB) -lWDutils -Wl,-rpath,$(PWD)/$(LIB)
MAKE_OBJ		= $(CXX) -c -o $@ $< -I$(INC) $(CXXFLAGS)
MAKE_EXE		= $(CXX) -o $@ $< -I$(INC) $(CXXFLAGS) $(LUTIL) -lm
ifdef WDutilsMPI
LUTIL_MPI		:= -L$(LIB) -lWDutilsMPI -Wl,-rpath,$(PWD)/$(LIB)
MAKE_OBJ_MPI		= $(CXX) -c -o $@ $< -I$(INC) $(CXXFLAGS) $(WDutilsMPI)
MAKE_EXE_MPI		= $(MPICC) -o $@ $< -I$(INC) $(CXXFLAGS) $(WDutilsMPI) $(LUTIL_MPI) -lm
endif
# -----------------------
# header dependency lists
# -----------------------

Pi_h			:= $(INC)Pi.h
heap_h			:= $(INC)heap.h
meta_h			:= $(INC)meta.h
inline_h		:= $(INC)inline.h
exception_h		:= $(INC)exception.h
sse_h			:= $(INC)sse.h $(exception_h)
traits_h		:= $(INC)traits.h $(exception_h)
io_h			:= $(INC)io.h $(exception_h)
tupel_h			:= $(INC)tupel.h $(INC)tupel.cc $(traits_h)
memory_h		:= $(INC)memory.h $(exception_h) $(traits_h) $(inline_h)
numerics_h		:= $(INC)numerics.h $(inline_h) $(memory_h) $(tupel_h)
spline_h		:= $(INC)spline.h $(numerics_h) $(memory_h)
random_h		:= $(INC)random.h $(inline_h) $(Pi_h) $(traits_h)
WDMath_h		:= $(INC)WDMath.h $(Pi_h) $(exception_h) $(traits_h) \
				$(inline_h)
geometry_h		:= $(INC)geometry.h $(sse_h) $(tupel_h) \
				$(INC)geometry_inl.h
octtree_h		:= $(INC)octtree.h $(memory_h) $(geometry_h)

ifdef WDutilsDevel
$(INC)neighbour.h	: $(DEV)neighbour.h
			(cd $(INC); ln -s ../$(DEV)neighbour.h neighbour.h)
neighbour_h		:= $(INC)neighbour.h $(octtree_h)

$(INC)peano.h		: $(DEV)peano.h
			(cd $(INC); ln -s ../$(DEV)peano.h peano.h)
peano_h			:= $(INC)peano.h $(traits_h)

$(INC)domain.h		: $(DEV)domain.h
			(cd $(INC); ln -s ../$(DEV)domain.h domain.h)
domain_h		:= $(INC)domain.h $(parallel_h) $(octtree_h) $(peano_h)

$(INC)parallel.h	: $(DEV)parallel.h
			(cd $(INC); ln -s ../$(DEV)parallel.h parallel.h)
parallel_h		:= $(INC)parallel.h $(memory_h)

$(INC)partree.h		: $(DEV)partree.h
			(cd $(INC); ln -s ../$(DEV)partree.h partree.h)
partree_h		:= $(INC)partree.h $(memory_h) $(geometry_h) \
			$(parallel_h)
endif

# -----------------------
# source dependency lists
# -----------------------

meta_cc			:= $(SRC)meta.cc $(meta_h)
exception_cc		:= $(SRC)exception.cc $(exception_h)
sse_cc			:= $(SRC)sse.cc $(sse_h)
io_cc			:= $(SRC)io.cc $(io_h)
numerics_cc		:= $(SRC)numerics.cc $(numerics_h) $(WDMath_h)
random_cc		:= $(SRC)random.cc $(random_h) $(numerics_h) \
				$(exception_h)
WDMath_cc		:= $(SRC)WDMath.cc $(WDMath_h) $(inline_h)
octtree_cc		:= $(SRC)octtree.cc $(octtree_h) $(memory_h)
domain_cc		:= $(DEV)domain.cc $(domain_h) $(io_h)

ifdef WDutilsDevel
neighbour_cc		:= $(DEV)neighbour.cc $(neighbour_h) $(heap_h)
parallel_cc		:= $(DEV)parallel.cc $(parallel_h)
partree_cc		:= $(DEV)partree.cc $(partree_h) $(peano_h) $(io_h)
endif

# ---------------
# library modules
# ---------------

$(LIB)exception.o:	$(exception_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)sse.o:		$(sse_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)io.o:		$(io_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)meta.o:		$(meta_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)numerics.o:	$(numerics_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)random.o:		$(random_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)WDMath.o:		$(WDMath_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)octtree.o:	$(octtree_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)

ifdef WDutilsDevel

$(LIB)neighbour.o:	$(neighbour_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)parallel.o:	$(parallel_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)partree.o:	$(partree_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)

WDutilsS_objs	:=	$(LIB)exception.o $(LIB)sse.o $(LIB)io.o $(LIB)meta.o \
			$(LIB)numerics.o $(LIB)octtree.o $(LIB)random.o \
			$(LIB)WDMath.o $(LIB)neighbour.o 

WDutils_objs	:=	$(WDutilsS_objs) $(LIB)parallel.o $(LIB)partree.o

else

WDutilsS_objs	:=	$(LIB)exception.o $(LIB)sse.o $(LIB)io.o $(LIB)meta.o \
			$(LIB)numerics.o $(LIB)octtree.o $(LIB)random.o \
			$(LIB)WDMath.o

WDutils_objs	:=	$(WDutilsS_objs)

endif

# -------
# library
# -------

AR			:= ar rc
RL			:= ranlib

$(LIB)libWDutils.a:	$(WDutils_objs)
			$(AR) $@ $?
			$(RL) $@
$(LIB)libWDutils.so:	$(WDutils_objs)
			$(CXX) $^ $(LDFLAGS) -o $@

ifdef WDutilsMPI
# -----------------------
# MPI modules and library
# -----------------------

$(LIB)parallelMPI.o:	$(parallel_cc) $(makefiles)
			$(MAKE_OBJ_MPI) $(IMPI)
$(LIB)domainMPI.o:	$(domain_cc) $(makefiles)
			$(MAKE_OBJ_MPI)

WDutilsP_objs	:=	$(WDutilsS_objs) \
			$(LIB)domainMPI.o $(LIB)parallelMPI.o

$(LIB)libWDutilsMPI.a:	$(WDutilsP_objs)
			$(AR) $@ $?
			$(RL) $@
$(LIB)libWDutilsMPI.so:	$(WDutilsP_objs)
			$(CXX) $^ $(LDFLAGS) -o $@

libraryMPI	:=	$(LIB)libWDutilsMPI.a $(LIB)libWDutilsMPI.so

endif

#

library		:	$(LIB)libWDutils.a $(LIB)libWDutils.so $(libraryMPI)

# -------------
# test routines
# -------------

ifdef WDutilsDevel

test/TestTree$(EXT)	:	test/TestTree.cc $(octtree_h) $(numerics_h) \
				$(Pi_h) $(io_h) $(heap_h) library
				$(MAKE_EXE)
test/TestGeometry$(EXT)	:	test/TestGeometry.cc $(geometry_h) library
				$(MAKE_EXE)
test/TestOMP$(EXT)	:	test/TestOMP.cc $(parallel_h) library
				$(MAKE_EXE)
test/TestTreeP$(EXT)	:	test/TestTreeP.cc $(partree_h) $(parallel_h) \
				$(Pi_h) library
				$(MAKE_EXE)

serial_tests		:=	test/TestTreeP$(EXT) \
				test/TestTree$(EXT) \
				test/TestGeometry$(EXT) \
				test/TestOMP$(EXT)

ifdef WDutilsMPI

test/TestDomainMPI$(EXT).o:	test/TestDomainMPI.cc $(domain_h) $(Pi_h)
				$(MAKE_OBJ_MPI)
test/TestDomainMPI$(EXT):	test/TestDomainMPI$(EXT).o library
				$(MAKE_EXE_MPI)

testsuite		:	library $(serial_tests) \
				test/TestDomainMPI$(EXT)

else

testsuite		:	library $(serial_tests)

endif
endif
# ---------------------
# doxygen documentation
# ---------------------

ifdef WDutilsDevel
dox/html/index.htlm:	$(INC)Pi.h $(INC)heap.h $(INC)meta.h $(INC)inline.h \
			$(INC)exception.h $(INC)sse.h $(INC)traits.h \
			$(INC)io.h $(INC)tupel.h $(INC)memory.h \
			$(INC)numerics.h $(INC)spline.h $(INC)random.h \
			$(INC)WDMath.h $(INC)octtree.h \
			$(INC)neighbour.h $(INC)parallel.h \
			$(INC)parallelMPI.h $(INC)domain.h \
			$(INC)peano.h $(INC)partree.h
			doxygen devel/utils.dox
else
dox/html/index.htlm:	$(INC)Pi.h $(INC)heap.h $(INC)meta.h $(INC)inline.h \
			$(INC)exception.h $(INC)sse.h $(INC)traits.h \
			$(INC)io.h $(INC)tupel.h $(INC)memory.h \
			$(INC)numerics.h $(INC)spline.h $(INC)random.h \
			$(INC)WDMath.h $(INC)octtree.h
			doxygen utils.dox
endif
doxu		:	dox/html/index.htlm

#END