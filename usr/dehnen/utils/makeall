# -*- makefile -*-
################################################################################
#
# Makefile for WDutils
#
################################################################################

.PHONY		: test


ifeq ($(USER),wd11)
WDutilsTEST	:= -DWDutilsTEST
endif

ifeq ($(USER),walter)
WDutilsTEST	:= -DWDutilsTEST
endif

# ----------------
# Compiler related
# ----------------

# GNU compiler
ifeq ($(COMPILER),gcc)
-include make.gcc
makefiles		:= makeall make.gcc
endif

# Portland group compiler
ifeq ($(COMPILER),pgi)
-include make.pgi
makefiles		:= makeall make.pgi
endif

# Pathscale compiler
ifeq ($(COMPILER),pth)
-include make.pth
makefiles		:= makeall make.pth
endif

# Sun compiler
ifeq ($(COMPILER),sun)
-include make.sun
makefiles		:= makeall make.sun
endif

# Intel compiler
ifeq ($(COMPILER),icc)
-include make.icc
makefiles		:= makeall make.icc
endif


# ---------
# MPI stuff
# ---------

MPIDIR			:= $(shell ls | grep mpich)
ifeq ($(MPIDIR),mpich)
WDutilsMPI		:= -DWDutilsMPI
MPICC			:= $(MPIDIR)/bin/mpicc
MPIINC			:= $(MPIDIR)/include/
IMPI			:= -I$(MPIINC)
endif

# ----
# test
# ----

# -----------
# directories
# -----------

INC             	:= inc/
SRC             	:= src/
LIB			:= lib$(EXT)/
LIBT			:= $(LIB).dummy
$(LIBT)			:
			mkdir -p -m 755 $(LIB)
			touch $(LIBT)

# -------------------------
# compile and link commands
# -------------------------

CXXFLAGS		:= $(CXXFLAGS) $(WDutilsTEST) $(WDutilsMPI)
LUTIL			:= -L$(LIB) -lWDutils -Wl,-rpath,$(PWD)/$(LIB)
LUTIL_MPI		:= -L$(LIB) -lWDutilsMPI -Wl,-rpath,$(PWD)/$(LIB)
MAKE_OBJ		= $(CXX) -c -o $@ $< -I$(INC) $(CXXFLAGS)
MAKE_EXE		= $(CXX) -o $@ $< -I$(INC) $(CXXFLAGS) $(LUTIL) -lm
ifdef WDutilsMPI
MAKE_EXE_MPI		= $(MPICC) -o $@ $< -I$(INC) $(CXXFLAGS) $(LUTIL_MPI) -lm
endif
# -----------------------
# header dependency lists
# -----------------------

Pi_h			:= $(INC)Pi.h
heap_h			:= $(INC)heap.h
meta_h			:= $(INC)meta.h
inline_h		:= $(INC)inline.h
exception_h		:= $(INC)exception.h
sse_h			:= $(INC)sse.h $(exception_h)
traits_h		:= $(INC)traits.h $(exception_h)
io_h			:= $(INC)io.h $(exception_h)
tupel_h			:= $(INC)tupel.h $(INC)tupel.cc $(traits_h)
memory_h		:= $(INC)memory.h $(exception_h) $(traits_h) $(inline_h)
numerics_h		:= $(INC)numerics.h $(inline_h) $(memory_h) $(tupel_h)
spline_h		:= $(INC)spline.h $(numerics_h) $(memory_h)
random_h		:= $(INC)random.h $(inline_h) $(Pi_h) $(traits_h)
WDMath_h		:= $(INC)WDMath.h $(Pi_h) $(exception_h) $(traits_h) \
				$(inline_h)
geometry_h		:= $(INC)geometry.h $(sse_h) $(tupel_h) \
				$(INC)geometry_inl.h
octtree_h		:= $(INC)octtree.h $(memory_h) $(geometry_h)
parallel_h		:= $(INC)parallel.h $(traits_h) $(memory_h) $(tupel_h)
peano_h			:= $(INC)peano.h $(traits_h)
domain_h		:= $(INC)domain.h $(parallel_h) $(octtree_h)
geometry_h		:= $(INC)geometry.h $(tupel_h) $(sse_h)

# -----------------------
# source dependency lists
# -----------------------

meta_cc			:= $(SRC)meta.cc $(meta_h)
exception_cc		:= $(SRC)exception.cc $(exception_h)
sse_cc			:= $(SRC)sse.cc $(sse_h)
io_cc			:= $(SRC)io.cc $(io_h)
numerics_cc		:= $(SRC)numerics.cc $(numerics_h) $(WDMath_h)
random_cc		:= $(SRC)random.cc $(random_h) $(numerics_h) \
				$(exception_h)
WDMath_cc		:= $(SRC)WDMath.cc $(WDMath_h) $(inline_h)
parallel_cc		:= $(SRC)parallel.cc $(parallel_h) $(meta_h) $(io_h)
octtree_cc		:= $(SRC)octtree.cc $(octtree_h) $(memory_h)
domain_cc		:= $(SRC)domain.cc $(domain_h) $(peano_h)

# ---------------
# library modules
# ---------------

$(LIB)exception.o:	$(exception_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)sse.o:		$(sse_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)io.o:		$(io_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)meta.o:		$(meta_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)numerics.o:	$(numerics_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)random.o:		$(random_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)WDMath.o:		$(WDMath_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)
$(LIB)octtree.o:	$(octtree_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ)

WDutils_objs	:=	$(LIB)exception.o $(LIB)sse.o $(LIB)io.o $(LIB)meta.o \
			$(LIB)numerics.o $(LIB)octtree.o $(LIB)random.o \
			$(LIB)WDMath.o

# -------
# library
# -------

AR			:= ar rc
RL			:= ranlib

$(LIB)libWDutils.a:	$(WDutils_objs)
			$(AR) $@ $?
			$(RL) $@
$(LIB)libWDutils.so:	$(WDutils_objs)
			$(CXX) $^ $(LDFLAGS) -o $@

library		:	$(LIB)libWDutils.a $(LIB)libWDutils.so

ifdef WDutilsMPI
# -------------------
# MPI library modules
# -------------------

$(LIB)parallel.o:	$(parallel_cc) $(makefiles)
			$(MAKE_OBJ) $(IMPI)
ifdef WDutilsTEST
$(LIB)domain.o:		$(domain_cc) $(makefiles)
			$(MAKE_OBJ)

WDutilsP_objs	:=	$(WDutils_objs) $(LIB)parallel.o $(LIB)domain.o
else
WDutilsP_objs	:=	$(WDutils_objs) $(LIB)parallel.o
endif

# -----------
# MPI library
# -----------

$(LIB)libWDutilsMPI.a:	$(WDutilsP_objs)
			$(AR) $@ $?
			$(RL) $@
$(LIB)libWDutilsMPI.so:	$(WDutilsP_objs)
			$(CXX) $^ $(LDFLAGS) -o $@

library		:	$(LIB)libWDutils.a $(LIB)libWDutils.so \
			$(LIB)libWDutilsMPI.a $(LIB)libWDutilsMPI.so
else

library		:	$(LIB)libWDutils.a $(LIB)libWDutils.so

endif

# -------------
# test routines
# -------------

ifdef WDutilsTEST

.PHONY			:	test TestDomain$(EXT) TestGeometry$(EXT) \
				TestTree$(EXT)

test/TestTree$(EXT)	:	test/TestTree.cc $(octtree_h) $(numerics_h) \
				$(Pi_h) $(io_h) $(heap_h) library
				$(MAKE_EXE)
test/TestGeometry$(EXT)	:	test/TestGeometry.cc $(geometry_h) library
				$(MAKE_EXE)

TestGeometry$(EXT)	:	test/TestGeometry$(EXT)
TestTree$(EXT)		:	test/TestTree$(EXT)

ifdef WDutilsMPI

test/TestDomain$(EXT).o	:	test/TestDomain.cc $(domain_h) $(Pi_h)
				$(MAKE_OBJ)
test/TestDomain$(EXT)	:	test/TestDomain$(EXT).o library
				$(MAKE_EXE_MPI)

TestDomain$(EXT)	:	test/TestDomain$(EXT)

test			:	library \
				TestDomain$(EXT) \
				TestGeometry$(EXT) \
				TestTree$(EXT)

else

test			:	library \
				TestGeometry$(EXT) \
				TestTree$(EXT)

endif
endif
# ---------------------
# doxygen documentation
# ---------------------

dox/html/index.htlm:	$(INC)Pi.h $(INC)heap.h $(INC)meta.h $(INC)inline.h \
			$(INC)exception.h $(INC)sse.h $(INC)traits.h \
			$(INC)io.h $(INC)tupel.h $(INC)memory.h \
			$(INC)numerics.h $(INC)spline.h $(INC)random.h \
			$(INC)WDMath.h $(INC)parallel.h $(INC)octtree.h
			doxygen utils.dox

doxu		:	dox/html/index.htlm

#END