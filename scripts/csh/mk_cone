#! /bin/csh -f
#
# to get a rotating disk:    mk_cone vscale=1 outflow=0 cone=90
# the disk= blends in a true disk so you can see both the outflow cones and the disk
#
#     nov-2018      written at ESO
#     jul-2020      expanded with a disk and indep. geometry for Alberto to play with

set nbody   = 10000     #> SCALE nbody=10000  1000:1000000:1000
set vscale  = 0         #> SCALE vscale=0     -2:2:0.1
set outflow = 1.0       #> SCALE outflow=1.0  0:2:0.1
set cone    = 30        #> SCALE cone=30      0:90:1
set inc     = 0         #> SCALE inc=0        0:90:1
set pa      = 0         #> SCALE pa=0         0:360:1
set incd    = 45        #> SCALE incd=45      0:90:1
set mirror  = 1         #> RADIO mirror=1     0,1
set fill    = f         #> RADIO fill=f       t,f
set disk    = 0         #> RADIO disk=0       0,1/100,1/10,1,,10,100,1000,10000
set out = cone1         #> ENTRY out=cone1

set rmin = 0.1
set rmax = 1
set rc   = 0.1

foreach _arg ($*)
    set $_arg
end

rm -f $out.*
mkdisk $out.0 $nbody mass=$disk potname=log potpars="0,0.5*$rc,$rc" rmax=2 >& /dev/null

if ($mirror == 0) then
  mkdisk - $nbody mass=1 rmin=$rmin rmax=$rmax potname=log potpars="0,0.5*$rc,$rc" |\
    snapscale - - vscale=$vscale |\
    snapspin - - omega=$outflow outflow=t|\
    snapfold - - theta=90-$cone fill=$fill |\
    snaprotate - $out.1 $inc,$pa xz

    cat $out.0 $out.1 |\
    snapmerge - - |\
    snaprotate - - $incd x > $out.snap
else
  mkdisk - $nbody mass=1 rmin=$rmin rmax=$rmax potname=log potpars="0,0.5*$rc,$rc" |\
    snapscale - - vscale=$vscale |\
    snapspin - - omega=$outflow outflow=t|\
    snapfold - - theta=90-$cone fill=$fill |\
    snaprotate - $out.1 $inc,$pa xz    
  mkdisk - $nbody mass=1 rmin=$rmin rmax=$rmax potname=log potpars="0,0.5*$rc,$rc" |\
    snapscale - - vscale=$vscale |\
    snapspin - - omega=$outflow outflow=t|\
    snapfold - - theta=90-$cone fill=$fill |\
    snapscale - - rscale=1,1,-1 |\
    snaprotate - $out.2 $inc,$pa xz    

  cat $out.0 $out.1 $out.2 |\
    snapmerge - - |\
    snaprotate - - $incd x > $out.snap
endif

set svar=0.01    # add a bit of smoothing.   In these defaults pixelsize=4/128 = 0.03
snapgrid $out.snap $out.vel moment=-1 nx=128 ny=128 svar=$svar >& /dev/null
snapgrid $out.snap $out.den moment=0  nx=128 ny=128 svar=$svar >& /dev/null
snapgrid $out.snap - nx=128 ny=128 nz=64 zrange=-2:2 svar=$svar |\
   ccdfits - $out.fits radecvel=t debug=-1

xpaset -p ds9 frame frameno 1
nds9 $out.vel
xpaset -p ds9 frame frameno 2
nds9 $out.den
xpaset -p ds9 frame frameno 3
nds9 $out.fits
xpaset -p ds9 frame frameno 4
nds9 $out.fits
xpaset -p ds9 frame frameno 5
nds9 $out.fits

