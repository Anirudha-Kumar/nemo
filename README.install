Installation overview:
----------------------

The aim of easing the installation in NEMO V3.x was to following that
of most of GNU utilities, by using autoconf. This would basically
be a 'configure;make;make install' except that NEMO does install
binaries in some directory like /usr/local/bin, and NEMO needs to
bootstrap an environment via a NEMORC file. Hence the basic scheme
is more like 'configure; source NEMORC; make'.  



Preconditions to INSTALLATION
=============================

The default installation installs NEMO with a simple postscript-only
graphics library (a.k.a. yapp_ps), unless it find the PGPLOT library
in a reasonably location. Otherwise you should probably consider selecting a
more versatile YAPP hookup with multiple output devices, e.g. PGPLOT.
It allows transparent switching between X (multiple persistent as well
as non-persistent), postscript, GIF, PPM etc.

a) Installing PGPLOT

   If you already have an environment variable $PGPLOT_DIR, it may already
   have been installed for you, and in addition configure (see below) will
   recognize it and you should already get PGPLOT as your default YAPP.

	cd $NEMO/local
	$NEMO/src/scripts/pgplot.install
	(you may need to get the pgplot522.tar.gz, or newer, file from
        Caltech (http://astro.caltech.edu/~tjp/pgplot/) or a local repository)

   this assumes $NEMO has a basic presence already, so don't start this
   yet, first figure something out about the installation. See below.

   See also $NEMO/src/scripts/

   On some linux systems (e.g. older versions of Redhat) may need to 
		 ln -s /usr/X11R6 /usr/X11

b) Installing HDF
    
   You only need the HDF library if you plan to work with CMHOG (hydrocode).
	
   This requires:
	libdf.a
	libz.a	(often comes with the system)
	/usr/local/include/df.h   -- and many others

   A newer version of HDF (HDF5) is currently under development. NEMO does
   not support this yet.

c) Installing CFITSIO

   There is no code in NEMO yet using CFITSIO, NEMO has two internal
   routines (fits.c and fitsio.c) that handle all of the fits I/O.
   However, we anticipate that CFITSIO will be used at some point, and if
   so, the preferred way to install is not the way they recommend you
   to do it. Their script configure is not quite autoconf 
 
   One way is to embed it into NEMO, so when you configure cfitsio

	configure --prefix=$NEMO/host/$NEMOHOST   

   but that currently does not work yet, so do:

	setenv FTOOLS_INCLUDE $NEMO/host/$NEMOHOST/include/cfitsio
	setenv FTOOLS_LIB     $NEMO/host/$NEMOHOST/lib
	mkdir $FTOOLS_INCLUDE 
	make
	make install


   If you system has FTOOLS installed, possibly via the LHEASOFT package,
   you can use their prefix, e.g.

	nemo% configure --with-cfitsio-prefix=/opt/lheasoft/SunOS_5.6_sparc


d) If you are on a system where you need to install NEMO and other packages,
   but don't have root access to places like /usr/local, 
   but plenty of disk-space, you can also host these packages inside of NEMO.

   For this the directory $NEMO/host will be created during the installation
   process, and each architecture that NEMO will support (the environment
   variable $NEMOHOST will be the architecture name, e.g. i686-pc-linux-gnu)
   Under $NEMO/host/$NEMOHOST you will then find the usual /usr/local hiearchy:
	bin		-> NEMOBIN
	include		-> ../include
	info		
	lib		-> NEMOLIB
	man	
	share
   Packages that NEMO can use can then be installed under this hierarchy:

	gsl:		configure --prefix=$NEMO/host/$NEMOHOST
	hdf ?
	pgplot ?
	cfitsio
	plplot

   most of these use GNU autoconf and can be installed in the NEMO hierarchy with
   the commands

	configure ....
	make
	make install

   and don't need root permission anymore.  

   NEMO can then use these packages as follows:

	configure --with-gsl-prefix=$NEMO/host/$NEMOHOST
	configure --enable-gsl
	configure --disable-gsl		(the default)

?) if you ever want to protect your source code from 'duplicate' include files, and still
use NEMO, how about
	-I$NEMO/host/$NEMOHOST/include
and use
	#include <nemo/stdinc.h>

no, that won't work, since stdinc.h will call for options.h, but it's now in nemo/options.h .....


Brief overview of a Version 3.x INSTALLATION  
============================================

1) Obtain the (compressed) tar file, nemo_3.x.y.tar.gz, from ftp.astro.umd.edu:/progs/nemo
   and uncompress it anywhere where you have enough (at least 100MB, but more is better):

        % gzip -cd nemo_3.x.y.tar.gz | tar xf -
   or
	% gtar -zxf nemo_3.x.y.tar.gz

   and now change directory to the newly made "NEMO" directory:

	% cd nemo_3.x.y

2) Run configure and install the basic NEMO libraries:

	% ./configure 
		(sometimes you may need to set your default compiler, e.g.
			setenv F77 g77
		 or whichever is applicable, if the fortran compiler does not
		 get detected properly, the run configure again)
		 Check the file config.log if configure fails
	% source nemo_end		(only if you have an old NEMO running)
	% source nemo_start
	% make dirs config_extra scripts
	% source NEMORC.local		 
	% rehash
	% make libs


3) Run the testsuite, which also installs a pretty basic set of NEMO executables:

	%  setenv YAPP /vps			## only needed if you're on a remote link,
						## otherwise leave it as /xs or yapp.ps

	%  src/scripts/testsuite -b		# run test testsuite


   Study the output of the lines that do not contain the word 'OK' at the end, e.g.

Working on /home/teuben/nemo_3.0.4/src/image/fits OK
Working on /home/teuben/nemo_3.0.4/src/image/io OK
Working on /home/teuben/nemo_3.0.4/src/image/misc OK
Working on /home/teuben/nemo_3.0.4/src/image/trans OK
Working on /home/teuben/nemo_3.0.4/src/kernel/fortran OK
Working on /home/teuben/nemo_3.0.4/src/kernel/io OK
Working on /home/teuben/nemo_3.0.4/src/kernel/misc OK
Working on /home/teuben/nemo_3.0.4/src/kernel/tab Problems			<<------
Working on /home/teuben/nemo_3.0.4/src/nbody/cores OK
Working on /home/teuben/nemo_3.0.4/src/nbody/evolve/aarseth/nbody0 Problems	<<------
Working on /home/teuben/nemo_3.0.4/src/nbody/evolve/aarseth/tools OK
Working on /home/teuben/nemo_3.0.4/src/nbody/evolve/hackcode/hackcode1 OK
Working on /home/teuben/nemo_3.0.4/src/nbody/evolve/scfm OK
Working on /home/teuben/nemo_3.0.4/src/nbody/image OK
Working on /home/teuben/nemo_3.0.4/src/nbody/init OK
Working on /home/teuben/nemo_3.0.4/src/nbody/io OK
Working on /home/teuben/nemo_3.0.4/src/nbody/io/starlab OK
Working on /home/teuben/nemo_3.0.4/src/nbody/reduc OK
Working on /home/teuben/nemo_3.0.4/src/nbody/trans OK
Working on /home/teuben/nemo_3.0.4/src/nbody/xyz OK
Working on /home/teuben/nemo_3.0.4/src/orbit/potential Problems			<<------
Results in /home/teuben/nemo_3.0.4/tmp/test22005/testsuite.log


*) Installing PGPLOT within NEMO is a bit cumbersome, but not
   impossible

	% ./configure 
	% source nemo_start
	% make dirs 
	% make config_clean				<==
	% rm NEMORC.local
	% src/scripts/pgplot.install dir=/tmp		<==
	% ./configure --with-pgplot-prefix=$NEMOLIB --with-yapp=pgplot
	% make dirs config_extra scripts
	% source NEMORC.local
	% rehash
	% make libs

*) Installation problems:

	- edit *.in
		make config config_extra
		
	- edit NEMORC.local (came from NEMORC.gen.in)
		source NEMORC.local

	- edit $NEMOLIB/makedefs (but danger, configure/config_extra can 
	  overwrite this)

	- if 'configure' fails for some reason, check the config.log file. 
	  Sometimes the cause is a rather trivial one, e.g. missing licences 
	  or a bad path or a bad shell.

*) pieces of configure out of date?  Encountering a new machine?

	1) you can update the config.guess and config.sub

		wget ftp://ftp.gnu.org/pub/gnu/config/config.guess
		wget ftp://ftp.gnu.org/pub/gnu/config/config.sub
		chmod a+x config.guess config.sub

	2) regenerate configure from configure.in

		autoconf

	3) replace some *.m4 files



*) Configuration options known to work:

	--with-pgplot-prefix=$NEMOLIB

		expects grfont.dat and friends to be in the named directory
		($NEMO/src/scripts/pgplot.install will help you
		installing pgplot in $NEMOLIB)

	--with-hdf-prefix=PFX

		expects hdf.h to be found somewhere in an {include,hdf} 
		subdirectory and will link with 'df', 'jpeg' and 'z' library.

	--with-miriad-prefix=PFX
		if $MIR is present, it will use this variable

	--disable-fortran
		if you don't have a working fortran compiler
	--with-ccmalloc
		use CCMALLOC to debug malloc usage

	--with-yapp=ps

* Configuration options that we are working on:

	--with-cfitsio-prefix=PFX 


	LAM/MPI: lam-6.3.1-4.i386.rpm 

	PVM:	 pvm-3.4.3-4.i386.rpm  pvm-gui-3.4.3-4.i386.rpm
	   needs  env.var   PVM_ROOT=/usr/share/pvm3/
		            PVM_ARCH=LINUX


* Known configurations to work:

	    NEMOHOST			"uname -a" for the machine that worked

	mips-sgi-irix6.5	IRIX64 sulfur 6.5 01101245 IP27
	i686-pc-linux-gnu	Linux nemo 2.2.14-5.0 #1 Tue Mar 7 21:07:39 EST 2000 i686 unknown
	sparc-sun-solaris2.6	SunOS atlas 5.6 Generic_105181-20 sun4u sparc SUNW,Ultra-5_10
	sparc-sun-solaris2.7
	sparc-sun-solaris2.8


	sulfur SGI: needs
		setenv F77 f90
	or		   g77


3) Running a small test of tests to see if everything works fine

 	src/scripts/testsuite

*** TODO:

     	- more consistent way between usage of variables in the NEMORC chain, 
	  and the 'makedefs' list.




	

ANYTHING BELOW THIS LINE IS FROM NEMO V2 and probably not relevant anymore
==========================================================================

2) Copy the NEMORC.gen file to NEMORC.local, and edit it to reflect your
   local site. This file is meant to set environment variables that
   had already been set in the NEMORC file, and you need to override.
   It is recommended to study this in some detail, particularly if you're
   not on one of machine to which I don't have frequent access.

	cp NEMORC.gen NEMORC.local

   You can also look at some working examples in $NEMO/src/scripts/NEMORC/

2b) The installation was also designed to allow upgrading your existing
    NEMO version by placing the new tar file on top of your own directory.
    If you are not sure you changed any source code, try this:
        cd $NEMO
        make new
    which  is supposed to check new sourcecode since the last official
    install.  ** i need to write more about this, this can be tricky **

3a) follow the $NEMO/src/bootstrap script to install a fairly complete
    system:

	src/scripts/bootstrap goto=install nemo=$cwd

    this will install all the way through the testsuite, but you will
    probably have to repeat this procedure since the default bootstrap
    currently does not install any graphics (yapp) libraries, just
    yapp_null.
	

3b) follow installation instructions as if NEMO was installed, i.e. add stuff
   to your .cshrc file:

	setenv NEMO /usr/nemo		(or "setenv NEMO `pwd`")
	source $NEMO/NEMORC
	...
	set path = ( . $NEMOBIN $path )



4) Bootstrap the system 

   % cd $NEMO   
   % make config  
   % make dirs 
   % make config_extra
   % make scripts

5) Make the library ($NEMOLIB/libnemo.a)

   % cd $NEMO/src
   % make clean install

   Before you run this, you may want to check/change 

   a) which loadobj to use - this MUST be choosen correctly
      by using the right CC flag, or fiddling with $NEMOINC/options.h

      For the following machines this is all pre-defined:
            sun3
            sun4 (sparc/sunos)
            sun5 (sparc/solaris)
            alpha (tested on: OSF1 V3.2, but V2.x probably won't work)
            sgi (tested on: IRIX V5.2, but V4.x probably won't work)
            linux (tested on 2.x, slackware 3.1 all the way through redhat 6.0)
		
   b) all yapp's are compiled into .o files, and not
      put into library; in accordance with using YAPPLIB
      environment variable at compile time to set it

   c) which options to (un)set in src/kernel/io/getparam.c (the
      user interface). A dryrun with 
            cc -c getparam.c 
      will do fine. Don't forget to remove getparam.o before
      official installation.


6) Compile hackcode, the C version of the treecode

   % cd $NEMO/src/nbody/evolve/hackcode/hackcode1; make hackcode1;
        mv hackcode1 $NEMOBIN
or equivalently:
   % mknemo hackcode1


6) Compile a few utilities, pick what you want....

   % cd $NEMO/src/nbody/tools ; make atos stoa ; mv atos stoa $NEMOBIN
   or
   % mknemo atos stoa tabtos tsf
   and a somewhat special
   % mknemo -c history hisf
 

   % cd $NEMO/src/nbody/init  ; make mkplummer ; mv mkplummer $NEMOBIN
   or
   % mknemo mkplummer

   % cd $NEMO/src/nbody/reduc ; make snapplot snapdiagplot ;
            mv snapplot snapdiagplot $NEMOBIN
   These last two will also tell you if the proper YAPPLIB was choosen.
   (Otherwise the EL macro may be used, e.g. as in:
		make snapplot EL="$YAPP_MONGO"
   The NEMORC must be setup for this properly. Local things should really
   be done in the NEMORC.local file. If it is not present, create one.
   Preferably you would want to keep away from editing the NEMORC file,
   since in updates you'd have to figure out what to retain and what to
   keep from this file, and again create you private version....

Again, if you want to change the default yapp graphics device; the
environment variable YAPPLIB needs to be reset to any of the YAPP_... 
ones in $NEMO/NEMORC file.  Make those changes to your NEMORC.local
file, not the ones that get updated when you get a new NEMO release
from me :-)


Some examples of patch work, mostly using the local Makefile's:

* Updating libnemo.a with a fixed set of routines:

	make install OBJFILES="a.o b.o c.o"

* Compiling a graphics program with another library:

	make snapplot YAPPLIB="$YAPP_MONGO"

* Compiling something with an extra library:

	make ccdfft EL=-lfft

* Compiling a program that does not need loadobj() and can hence be
  compiled without the -Bstatic in $NEMOBIN/cc. This is peculiar to
  some architectures, e.g.

	make atos CC="/bin/cc -I$NEMOINC"

  It will create significantly smaller executables since shared
  libraries are used. On Solaris this will be the default.

* Testbed functions:

  Some functions in the $NEMO/src/kernel tree, and in some of the other
  places, can be compiled into an exectuable, for debugging purposes.
  Compilation of such testbed routines is accomplished by a piece of
  main() code [or nemo_main() for all that matters] #ifdeffed by a
  TESTBED test.
  To compile them, one can generally use

        make getparam CFLAGS="-g -DTESTBED"

  or, if provided for in the Makefile:

        make getpartest

7) Testsuite:
  Once you have basic compilation going, you should run the testsuite.
This is a shell script that will help you find all the test scripts
(as defined by a makefile-based Testfile in the various directories in
$NEMO), identify the programs needed for the tests, compile those programs,
and then run a whole series of tests.
You can then compare the output of the testsuite against a baseline 
release and get an idea if your newly compiled version of NEMO is producing
reasonable data.

First query and install all programs needed:

	$NEMO/src/scripts/testsuite -q -i

The bootstrap script actually also runs the standard testsuite.

ERROR:::: found /data/nemo/src/nbody/evolve/scfm/scfm.f
f77 -O  -c scfm.f -o scfm.o
f77 -O -o scfm scfm.o
scfm.doc open: No such file or directory
apparent state: unit 10 named SCFPAR
last format: list io
lately writing direct formatted external IO
Abort (core dumped)
 [was up to date] Well done




-- maintenance:

before the 
	
	cd $NEMO
	src/script/version inc			
  or
	src/script/version set 3.0.1		

  then make a tar ball

	make dist

  which makes nemo_3.0.1.tar.gz

	make stamp

  which stamps your local adm/Chkfile such that 'make new' works




	
-- 
  Faking a host


  If you get a message like:
	
	Warning: /atlas2/nemo/nemo/bin/sparc-sun-solaris2.8 does not exist

  you can fix this with

	make truehost TRUEHOST=....

  or if you want to give an exist host other aliases, use

	make fakehost FAKEHOST=....

	
