Preconditions to Installation
=============================

To build the basics of NEMO you need compilers (C/C++/Fortran).  C is essential,
C++ and Fortran highly recommended.  You will also need the usual build tools
(make, csh)

C		essential
C++		highly recommended
Fortran    	highly recommended
csh		essential (some scripts are still in csh)
make 		essential
cmake		highly recommended
pgplot    	recommended for yapp_pgplot
cfitsio		recommended for some tools
hdf4     	recommended for some tools
hdf5		recommended for some tools
python3		recommended
swig

Depending on your packaging tools (apt, yum, brew, port, ....) these are hidden under
various package names



-gfortran
-libx11-dev
-libxt-dev
-libxext-dev
-libcairo2-dev
-build-essential
-cmake
-csh
-pgplot5
-libhdf4-dev
-libhdf5-dev
-hdf5-tools



DOWNLOAD and INSTALLATION: two examples 
=======================================

Perhaps the easiest way to install nemo is using the docs/install_nemo
script. The following should work:

    wget https://teuben.github.io/nemo/install_nemo
    chmod +x install_nemo
    ./install_nemo nemo=nemo
    source nemo_start.sh

         *replace .sh with .csh if you use the other shell


if you prefer the more classic approach, we do use autoconf:

    git clone https://github.com/teuben/nemo
    cd nemo
    ./configure ...
    make build
    source nemo_start.sh

DOWNLOAD using git
==================
If you haven't yet installed git, it can be obtained through the package manager.  For
example

    sudo apt install git tcsh

To download the files using git, you can use git clone from your terminal.  For example

    git clone https://github.com/teuben/nemo.git

Then you can proceed to "INSTALLATION using install_nemo script" below
In worst case you can manually download the nemo.zip file from github.
You will also need the csh-shell to be installed.


MANUAL INSTALLATION OVERVIEW:
=============================

This document gives some background information in case the more
automated script(s) to install NEMO have failed you.

Installation of NEMO V4.x roughly follows that of most open source
packages, except that NEMO does not install its products in an
external prefix like /usr/local, but keeps them "in-place" and
bootstraps a special NEMO shell environment by sourcing an "rc" file 
where things like your search path are modified for your shell.  Hence
the basic scheme is more one of (except commands are different and
detailed below!!!):

	configure   [options]
	make build1 build2 build3 build4
	source nemo_start.sh

It may be handy to pre-install a few libraries and packages on your
system, if they do not exist yet, though for a few common ones
(e.g. pgplot, cfitsio, gsl, hdf, hdf5) we also do have some support to
install them within the NEMO tree before the NEMO is installed.
Typically you can
	  configure --prefix=$NEMO/opt
	  make
	  make install
or
	  cmake -DCMAKE_INSTALL_PREFIX=$NEMO/opt ..
	  make
	  make install

Preconditions to INSTALLATION
=============================

a1) Installing PGPLOT - native Linux/MacOSX-brew distribution

   Some distributions keep pgplot in their package list. For example
   in Ubuntu you can say
      	     sudo apt install pgplot5
   (but see below for the giza version).  In this case you can use

   	configure --with-yapp=pgplot --with-pgplot-prefix=/usr/lib

   In Centos PGPLOT is also available

             sudo yum install pgplot-devel pgplot

   On MacOSX, with brew, you can
             brew install pgplot

a2) Installing PGPLOT (native CALTECH version)

   It is recommended to install PGPLOT before you install NEMO. 
   We do have a simple procedure to install PGPLOT during the NEMO
   install itself.  You can also decide to use another plotting (YAPP) 
   device though, e.g. plplot (a pure C plotting library similar to PGPLOT) 
   is gaining in popularity.

   Unless it finds the PGPLOT library in a reasonably location, or as dictated
   by the PGPLOT_DIR environment variable, or via the --with-pgplot-dir= option
   to configure, as a fallback NEMO would install itself with a very simple 
   postscript-only graphics library (a.k.a. yapp_ps), 

   If none of these options work, you can also try to install PGPLOT in
   for example the following way

	cd $NEMO/local
	$NEMO/src/scripts/pgplot.install
	(you may need to get the pgplot522.tar.gz, or newer, file from
        Caltech (http://astro.caltech.edu/~tjp/pgplot/) or a local repository)

   On some older linux systems may need to create the following symbolic link
		 ln -s /usr/X11R6 /usr/X11


a3) Installing PGPLOT - MIRIAD pgplot git release

   You can also place the pgplot source code in $NEMO/local (the default git install
   uses this method), and use something like

   	make pgplot png=1 gif=1


a4) Install PGPLOT (giza github installation) -

	The giza package is now primarily maintained on the developer's github account
	(https://github.com/danieljprice/giza).  The giza implementation of PGPLOT can be installed
	by adding an extra parameter to the ./install_nemo script: "./install_nemo giza=1"

	It can also be cloned from price's repository using git clone https://github.com/danieljprice/giza.git.
	Then it can be installed using the same instructions as the sourceforge download.  Here is an example

	git clone https://github.com/danieljprice/giza.git
	cd giza
	./configure --prefix=$NEMO
	make
	make install

	(OLD) Install PGPLOT (giza sourceforge) - 

    The giza package (http://giza.sourceforge.net) has its own implementation of PGPLOT,
    which is compatible with cairo. Here is an example that seems to work with NEMO

    cd $NEMO/local
    svn co http://svn.code.sf.net/p/giza/code/ giza
    cd giza
    ./configure --prefix=$NEMO
    make
    make install

    After this you can use the regular

    cd $NEMO
    configure --with-yapp=pgplot --with-pgplot-prefix=$NEMO/lib

b1) Installing HDF4
    
   You only need the HDF library if you plan to work with the ZEUS or CMHOG 
   hydrocodes.
	
   This requires:
	libdf.a
	libz.a	(often comes with the system)
	/usr/local/include/df.h   -- and many others
   A newer version of HDF (HDF5) is currently under development. NEMO does
   not support this yet.

   The install package for hdf4 can be found at https://support.hdfgroup.org/products/hdf4/.
   You will need to extract the package. The next command assumes you are already in HDF4 directory
   One way to install this package is 

   configure --prefix=$NEMO
   make
   make install

   https://support.hdfgroup.org/ftp/HDF/releases/HDF4.2.14/src/CMake-hdf-4.2.14.tar.gz
   https://support.hdfgroup.org/ftp/HDF/releases/HDF4.2.14/src/hdf-4.2.14.tar.gz

b2) Installing HDF5


https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.6/src/hdf5-1.10.6.tar.gz


c) Installing CFITSIO  (pending work on configure.in)
 
   NEMO has two internal routines (fits.c and fitsio.c) that handle various
   types of fits I/O. Optionally the CFITSIO library can also be used, e.g.
   fitsio_nemo.c implements the fitsio.c file by providing a wrapper
   that actually calls the CFITSIO library (courtesy Bill Pence)

   wget ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/cfitsio3390.tar.gz
   (see https://heasarc.gsfc.nasa.gov/fitsio/fitsio.html)
 
   One way is to embed it into NEMO, so when you configure cfitsio

	configure --prefix=$NEMO
	make
	make install

   If your system has FTOOLS installed, possibly via the LHEASOFT package,
   you can use their prefix, e.g.

	nemo% configure --with-cfitsio-prefix=/opt/lheasoft/SunOS_5.6_sparc


d) If you are on a system where you need to install NEMO and other packages,
   but don't have root access to places like /usr/local, 
   but plenty of disk-space, you can also host these packages inside of NEMO.

   For this a directory $NEMO/opt has also been created during the installation
   process, 
   Under $NEMO/opt you will then find the usual /usr/local hiearchy:
	bin	
	include	
	info		
	lib	
	man	
	share
   Packages that NEMO can use can then be installed under this hierarchy:

	gsl:		configure --prefix=$NEMO
	hdf ?
	pgplot ?
	cfitsio		configure --prefix=$NEMO
	plplot
	gcc

   most of these use GNU autoconf and can be installed in the NEMO hierarchy with
   the commands

	configure ....
	make
	make install

   and won't need root permission anymore if $NEMO/opt is used

   NEMO can then use these packages as follows:

	configure --with-gsl-prefix=$NEMO
	configure --enable-gsl
	configure --disable-gsl		(the default)



Brief overview of a Version 4.x INSTALLATION  
============================================


1) Obtain the source code via git or a versioned tar files.  We keep several versions in ftp.astro.umd.edu:/progs/nemo


        % gzip -cd nemo_VERSION.tar.gz | tar xf -

   or more compact:

	% gtar -zxf nemo_VERSION.tar.gz

   and now change directory to the newly made "nemo" directory:

	% cd nemo_VERSION

   (VERSION could be e.g. "3.2.4" or better yet, "cvs")

2) Run configure and install the basic NEMO libraries:

	% ./configure  [options]
		(sometimes you may need to set your default compiler, e.g.
			setenv F77 gfortran (or use export for bash)
		 or whichever is applicable, if the fortran compiler does not
		 get detected properly, the run configure again)
		 Check the file config.log if configure fails
	% source nemo_start.csh
	% make postconfig
	% rehash
	% make libs


3) Run the testsuite, which also installs a pretty basic set of NEMO executables:

	%  setenv YAPP /vps		## the default /xs,  requires you to be in X
	%  src/scripts/testsuite -b	# run test testsuite


   Study the output of the lines that do not contain the word 'OK' at the end, e.g.

Working on /home/teuben/nemo_3.0.4/src/image/fits OK
Working on /home/teuben/nemo_3.0.4/src/image/io OK
Working on /home/teuben/nemo_3.0.4/src/image/misc OK
Working on /home/teuben/nemo_3.0.4/src/image/trans OK
Working on /home/teuben/nemo_3.0.4/src/kernel/fortran OK
Working on /home/teuben/nemo_3.0.4/src/kernel/io OK
Working on /home/teuben/nemo_3.0.4/src/kernel/misc OK
Working on /home/teuben/nemo_3.0.4/src/kernel/tab Problems			<<------
Working on /home/teuben/nemo_3.0.4/src/nbody/cores OK
Working on /home/teuben/nemo_3.0.4/src/nbody/evolve/aarseth/nbody0 Problems	<<------
Working on /home/teuben/nemo_3.0.4/src/nbody/evolve/aarseth/tools OK
Working on /home/teuben/nemo_3.0.4/src/nbody/evolve/hackcode/hackcode1 OK
Working on /home/teuben/nemo_3.0.4/src/nbody/evolve/scfm OK
Working on /home/teuben/nemo_3.0.4/src/nbody/image OK
Working on /home/teuben/nemo_3.0.4/src/nbody/init OK
Working on /home/teuben/nemo_3.0.4/src/nbody/io OK
Working on /home/teuben/nemo_3.0.4/src/nbody/io/starlab OK
Working on /home/teuben/nemo_3.0.4/src/nbody/reduc OK
Working on /home/teuben/nemo_3.0.4/src/nbody/trans OK
Working on /home/teuben/nemo_3.0.4/src/nbody/xyz OK
Working on /home/teuben/nemo_3.0.4/src/orbit/potential Problems			<<------
Results in /home/teuben/nemo_3.0.4/tmp/test22005/testsuite.log


*) Installing PGPLOT within NEMO is a bit cumbersome, but not
   impossible. The following sessions assumes you have an official
   tar release from the Caltech site ftp://astro.caltech.edu/pub/pgplot

     ** actually this is now the default, and unless you want to work
	on a system where you have guaranteed access to PGPLOT via 
	another package,e.g. miriad, you can borrow that version.
	In practice i've found this to cause confusion.

	% ./configure F77=/opt/f77 CC=/opt/cc     (F77= and CC= optional)
	% source nemo_start
	% make dirs 
	% make config_clean				<==
	% src/scripts/pgplot.install dir=/tmp		<==
	% ./configure --with-pgplot-prefix=$NEMOLIB --with-yapp=pgplot
	% make dirs config_extra scripts
	% rehash
	% make libs

   Or if you want to use our (not TJP blessed) PGPLOT cvs release 

	% ./configure 
	% source nemo_start.csh
	% make dirs 
	% make config_clean				<==
        % cd $NEMO/local
	% cvs co pgplot					<== cvs.astro.umd.edu
	% cd $NEMO
	% src/scripts/pgplot.install dir=$NEMO/tmp	<== our install
	% ./configure --with-pgplot-prefix=$NEMOLIB --with-yapp=pgplot
	% make dirs config_extra scripts
	% source NEMORC.local
	% rehash
	% make libs
	

*) Installation problems:

	- edit *.in
		make config config_extra
		
	- edit NEMORC.local (came from NEMORC.gen.in)
		source NEMORC.local

	- edit $NEMOLIB/makedefs (but danger, configure/config_extra can 
	  overwrite this)

	- if 'configure' fails for some reason, check the config.log file. 
	  Sometimes the cause is a rather trivial one, e.g. missing licences 
	  or a bad path or even a bad shell

	- on occasion the sellwood/tools test will hang.

*) pieces of configure out of date?  Encountering a new machine?

	1) you can update the config.guess and config.sub

		wget ftp://ftp.gnu.org/pub/gnu/config/config.guess
		wget ftp://ftp.gnu.org/pub/gnu/config/config.sub
		chmod a+x config.guess config.sub

	2) regenerate configure from configure.in

		autoconf

	3) replace some *.m4 files

	4) replace aclocal.m4:		aclocal



*) Configuration options known to work:

	--with-pgplot-prefix=$NEMOLIB

		expects grfont.dat and friends to be in the named directory
		($NEMO/src/scripts/pgplot.install will help you
		installing pgplot in $NEMOLIB if you need)

	--with-hdf-prefix=PFX

		expects hdf.h to be found somewhere in an {include,hdf} 
		subdirectory and will link with 'df', 'jpeg' and 'z' library.
		Doesn't work with HDF5 yet, assumes HDF4 for ow.

	--with-miriad-prefix=PFX
		if $MIR is present, it will use this variable, else you need 
		to set it.

	--disable-fortran
		if you don't have a working fortran compiler (actually doesn't work)

	--with-ccmalloc
		use CCMALLOC to debug malloc usage

	--with-yapp=ps
		use a PS based yapp, on systems where you cannot get pgplot to work,
		or really don't have a working fortran compiler

	--with-cfitsio-prefix=PFX
		--disable-cfitsio		explicitly disable it 
		--enable-cfitsio		explicitly enable it  (the default)

	--with-gsl-prefix=PFX
		--enable-gsl
		--disable-gsl		(the default)



3) Running a small test of tests to see if everything works fine

 	src/scripts/testsuite


